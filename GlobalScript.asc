// Automatically converted interaction variables
int IntVar_Global_1 = 0;
export IntVar_Global_1;
// main global script file
//GUI setup: Line 449
//Array setup line 502
//Global int setup line 730

type1 chakra[10];
type2 powers[20];
type3 rings[20];
type4 partner[5];
type5 monsters[20];
type6 swords[40];
type7 shields[40];
type8 mission[20];
type9 trade[21];
type10 cave[20];
type11 monsterset[100];

Button* Chosenbutton;

int monHP;
int monSTR;
int monTYPE;
int over1;
int over2;
int whichinv=0;
int tempchar;
int clearchar;
int warning2; //standard overlay name
int CurrentMissionIndex;

    int weight=0; //overall weight
		int waterA=0; //water amount
		int fruitA=0; //fruit amount
		int meatA=0; //meat amount
		int woodA=0; //wood amount
		int textA=0; //textile amount
		int metalA=0; //metal amount
		int overallprice=0;

string allbuffer1;
string allbuffer2;
string moneybuffer;

int missionListLink[100];
String PowerType[10];
String MissionType[10];

int partnercounter=0;

function TweenRevealGUI(GUI* GUIindex)
{
  GUIindex.Transparency = 100;
  GUIindex.Visible = true;
  GUIindex.TweenTransparency(0.2, 0, eEaseInEaseOutTween, eNoBlockTween);
}
function TweenMoveGUI(GUI* GUIindex, int destination, int amount)
{
  //GUIindex.X=destination+amount;
  //GUIindex.X=254;
  GUIindex.SetPosition(destination+amount, GUIindex.Y);
  GUIindex.TweenPosition(0.5, destination, GUIindex.Y, eEaseInEaseOutTween, eNoBlockTween);
}

function hptext(int health, int xid, int ftcolor)
{
  string floatext;
  StrFormat(floatext, "%d",health);
  int overhp=CreateTextOverlay(xid,100,200,3,ftcolor,floatext);
  int i=100;
  while (i>0)
  {
  SetTextOverlay(overhp,xid,i,200,3,ftcolor,floatext);
  i=i-2;
  Wait(1);
  }
  RemoveOverlay(overhp);
}


function hurt_monster()
{
  int i=0;
	
	while (i<100) 
        { 
        SetCharacterTransparency(1, i);
	i+=15;
	Wait(1);
	}
	
	SetCharacterTransparency(1, 0);
	Wait(1);
	i=0;
	
	while (i<100) 
	{ 
        SetCharacterTransparency(1, i);
	i+=15;
	Wait(1);
	}
	
	SetCharacterTransparency(1, 0);
	Wait(10);
}

function hitmonster(int monsterindex)
{
        int attackflag=0;
//work out attk strength from char str + weapon str
        int tempattack=partner[GetGlobalInt(11)].strength+
												swords[partner[GetGlobalInt(11)].weaponID].str+rings[partner[GetGlobalInt(11)].ringID].str+
													Random(partner[GetGlobalInt(11)].level*2);

//change attk strength depedning on outside factor
				//from enemy chakra affiliation
				if (chakra[partner[GetGlobalInt(11)].chakratype].weak==monsterset[GetGlobalInt(10)].battletype[monsterindex])
						tempattack-=tempattack/4;
				else if (chakra[monsterset[GetGlobalInt(10)].battletype[monsterindex]].weak==partner[GetGlobalInt(11)].chakratype)
						tempattack+=tempattack/4;
						
				//from choice of attack str
				if (Chosenbutton==attklow)
						tempattack-=tempattack/4;
				if (Chosenbutton==attkmed)
				{
					if(GetGlobalInt(8)>=swords[partner[GetGlobalInt(11)].weaponID].chi) 
						SetGlobalInt(8, GetGlobalInt(8)-swords[partner[GetGlobalInt(11)].weaponID].chi);
						else
							attackflag=1;
				}
				if (Chosenbutton==attkhigh)
				{
				if (GetGlobalInt(8)>=swords[partner[GetGlobalInt(11)].weaponID].chi+(swords[partner[GetGlobalInt(11)].weaponID].chi/2)) 
				{
				    tempattack+=Random((swords[partner[GetGlobalInt(11)].weaponID].str)+partner[GetGlobalInt(11)].level*2);
						SetGlobalInt(8, GetGlobalInt(8)-swords[partner[GetGlobalInt(11)].weaponID].chi+(swords[partner[GetGlobalInt(11)].weaponID].chi/2));
				}
						else
						attackflag=1;
			  }
        
        Chosenbutton=null;
        
		if (attackflag==0)
		{
		tempattack-=monsters[monsterset[GetGlobalInt(10)].index[monsterindex]].def;
		if (tempattack<1)
			tempattack=1;
        string buffer;
        GetGlobalString(partner[GetGlobalInt(11)].name,buffer);
        StrCat(buffer," attacks");
        warning2=CreateTextOverlay(121,15,200,3,65500,buffer);
        Wait(25);
        RemoveOverlay(warning2);
        PlaySound(1);
        hurt_monster();
        PlaySound(3);
        hptext(tempattack,character[1].x,61440);
        monsterset[GetGlobalInt(10)].battleHP[monsterindex]-=tempattack;
					if (GetGlobalInt(11)==0)
					{
						SetGlobalInt(0, GetGlobalInt(0)+tempattack);   //counter seeing how much damage they inflicted the creature to see how much exp to give
						}
					else
					{
					  SetGlobalInt(1, GetGlobalInt(1)+tempattack);        
					}
			GUIOff(6);
          GUIOff(22);
        if (monsterset[GetGlobalInt(10)].battleHP[monsterindex]<1)
        {
     
          SetGlobalInt(13, 1);
          
          }
       else
       {
        SetGlobalInt(12, GetGlobalInt(12)+1);
        if (GetGlobalInt(12)>2) SetGlobalInt(12,0);
        SetGlobalInt(11, 1);
    }
  } //end if global int 8 >0
  else
  {
		warning2=CreateTextOverlay(121,15,200,3,65500,"Not enough CHI");
        Wait(25);
    RemoveOverlay(warning2);
   }
}//end if attack
        


function ChakraPowerHitMonster(int monsterindex)
{
  
  if ((Chosenbutton==chka) && (GetGlobalInt(8)>=powers[chakra[partner[GetGlobalInt(11)].chakratype].power[1]].cost))
	{
    int tempattack=(powers[chakra[partner[GetGlobalInt(11)].chakratype].power[1]].str);//+Random(GetGlobalInt(7));
			if (chakra[partner[GetGlobalInt(11)].chakratype].weak==monsters[monsterset[GetGlobalInt(10)].index[monsterindex]].montype)
				tempattack-=tempattack/2;
			else if (chakra[monsters[monsterset[GetGlobalInt(10)].index[monsterindex]].montype].weak==partner[GetGlobalInt(11)].chakratype)
				tempattack+=tempattack/2;
		tempattack+=(tempattack/2)*chakra[partner[GetGlobalInt(11)].chakratype].level;
		tempattack-=monsters[monsterset[GetGlobalInt(10)].index[monsterindex]].chidef;		
			  SetGlobalInt(8, GetGlobalInt(8)-(powers[chakra[partner[GetGlobalInt(11)].chakratype].power[1]].cost));
				string buffer;
        GetGlobalString(partner[GetGlobalInt(11)].name,buffer);
        StrCat(buffer," attacks");
        warning2=CreateTextOverlay(121,15,100,3,65500,buffer);
        Wait(25);
        RemoveOverlay(warning2);
				PlaySound(5);
				hurt_monster();
				PlaySound(3);
				hptext(tempattack,character[1].x,65440);
				monsterset[GetGlobalInt(10)].battleHP[monsterindex]-=tempattack;

       GUIOff(6);
       GUIOff(23);
			if (monHP<1)
			{
	      SetGlobalInt(13, 1);
	     
		  }
			else
			{
				SetGlobalInt(12, GetGlobalInt(12)+1);
				if (GetGlobalInt(12)>2) 
					SetGlobalInt(12,0);
				SetGlobalInt(11, 1);
			}
	}
	else if ((Chosenbutton==chkb) && (GetGlobalInt(8)>=powers[chakra[partner[GetGlobalInt(11)].chakratype].power[2]].cost) && powers[chakra[partner[GetGlobalInt(11)].chakratype].power[2]].on==1)
	{
	  if (powers[chakra[partner[GetGlobalInt(11)].chakratype].power[2]].type>=1) //hurting power
	  {
    int tempattack=(powers[chakra[partner[GetGlobalInt(11)].chakratype].power[2]].str);//+Random(GetGlobalInt(7));
			if (chakra[partner[GetGlobalInt(11)].chakratype].weak==monsters[monsterset[GetGlobalInt(10)].index[monsterindex]].montype)
				tempattack-=tempattack/2;
			else if (chakra[monsters[monsterset[GetGlobalInt(10)].index[monsterindex]].montype].weak==partner[GetGlobalInt(11)].chakratype)
				tempattack+=tempattack/2;
		tempattack+=(tempattack/2)*chakra[partner[GetGlobalInt(11)].chakratype].level;
		tempattack-=monsters[monsterset[GetGlobalInt(10)].index[monsterindex]].chidef;		
			  SetGlobalInt(8, GetGlobalInt(8)-(powers[chakra[partner[GetGlobalInt(11)].chakratype].power[2]].cost));
				string buffer;
        GetGlobalString(partner[GetGlobalInt(11)].name,buffer);
        StrCat(buffer," attacks");
        warning2=CreateTextOverlay(121,15,100,3,65500,buffer);
        Wait(25);
        RemoveOverlay(warning2);
				PlaySound(5);
				hurt_monster();
				PlaySound(3);
				hptext(tempattack,character[1].x,65440);
				monsterset[GetGlobalInt(10)].battleHP[monsterindex]-=tempattack;

       GUIOff(6);
       GUIOff(23);
			if (monsters[monsterset[GetGlobalInt(10)].index[monsterindex]].montype<1)
			{
	      SetGlobalInt(13, 1);
	     
		  }
			else
			{
				SetGlobalInt(12, GetGlobalInt(12)+1);
				if (GetGlobalInt(12)>2) 
					SetGlobalInt(12,0);
				SetGlobalInt(11, 1);
			}
			} //end of if hurting power
		else if (powers[chakra[partner[GetGlobalInt(11)].chakratype].power[2]].type==0) //healing
		{
		  partner[0].hp+=powers[chakra[partner[GetGlobalInt(11)].chakratype].power[2]].str;
		  if (partner[0].hp>partner[0].maxhp)
				partner[0].hp=partner[0].maxhp;
		  hptext(powers[chakra[partner[GetGlobalInt(11)].chakratype].power[2]].str,character[partner[0].view].x,1664);
			partner[GetGlobalInt(52)].hp+=powers[chakra[partner[GetGlobalInt(11)].chakratype].power[2]].str;
		  if (partner[GetGlobalInt(52)].hp>partner[GetGlobalInt(52)].maxhp)
				partner[GetGlobalInt(52)].hp=partner[GetGlobalInt(52)].maxhp;
		  hptext(powers[chakra[partner[GetGlobalInt(11)].chakratype].power[2]].str,character[partner[GetGlobalInt(52)].view].x,1664);
		  
		  SetGlobalInt(8, GetGlobalInt(8)-(powers[chakra[partner[GetGlobalInt(11)].chakratype].power[2]].cost));
		  
			GUIOff(6);
      GUIOff(23);
		  SetGlobalInt(12, GetGlobalInt(12)+1);
				if (GetGlobalInt(12)>2) 
					SetGlobalInt(12,0);
				SetGlobalInt(11, 1);
		  }// end of if healing
		  
	}//end of button 1
	else if ((Chosenbutton==chkc) && (GetGlobalInt(8)>=powers[chakra[partner[GetGlobalInt(11)].chakratype].power[3]].cost) && powers[chakra[partner[GetGlobalInt(11)].chakratype].power[3]].on==1)
	{
	  if (powers[chakra[partner[GetGlobalInt(11)].chakratype].power[3]].type>=1) //hurting power
	  {
    int tempattack=(powers[chakra[partner[GetGlobalInt(11)].chakratype].power[3]].str);//+Random(GetGlobalInt(7));
			if (chakra[partner[GetGlobalInt(11)].chakratype].weak==monsters[monsterset[GetGlobalInt(10)].index[monsterindex]].montype)
				tempattack-=tempattack/2;
			else if (chakra[monsters[monsterset[GetGlobalInt(10)].index[monsterindex]].montype].weak==partner[GetGlobalInt(11)].chakratype)
				tempattack+=tempattack/2;
		tempattack+=(tempattack/2)*chakra[partner[GetGlobalInt(11)].chakratype].level;
		tempattack-=monsters[GetGlobalInt(10)].chidef;		
			  SetGlobalInt(8, GetGlobalInt(8)-(powers[chakra[partner[GetGlobalInt(11)].chakratype].power[3]].cost));
				string buffer;
        GetGlobalString(partner[GetGlobalInt(11)].name,buffer);
        StrCat(buffer," attacks");
        warning2=CreateTextOverlay(121,15,100,3,65500,buffer);
        Wait(25);
        RemoveOverlay(warning2);
				PlaySound(5);
				hurt_monster();
				PlaySound(3);
				hptext(tempattack,character[1].x,65440);
				monsterset[GetGlobalInt(10)].battleHP[monsterindex]-=tempattack;

       GUIOff(6);
       GUIOff(23);
			if (monsterset[GetGlobalInt(10)].battleHP[monsterindex]<1)
			{
	      SetGlobalInt(13, 1);
	     
		  }
			else
			{
				SetGlobalInt(12, GetGlobalInt(12)+1);
				if (GetGlobalInt(12)>2) 
					SetGlobalInt(12,0);
				SetGlobalInt(11, 1);
			}
			} //end of if hurting power
		else if (powers[chakra[partner[GetGlobalInt(11)].chakratype].power[3]].type==0) //healing
		{
		  partner[0].hp+=powers[chakra[partner[GetGlobalInt(11)].chakratype].power[3]].str;
		  if (partner[0].hp>partner[0].maxhp)
				partner[0].hp=partner[0].maxhp;
		  hptext(powers[chakra[partner[GetGlobalInt(11)].chakratype].power[3]].str,character[partner[0].view].x,1664);
			partner[GetGlobalInt(52)].hp+=powers[chakra[partner[GetGlobalInt(11)].chakratype].power[3]].str;
		  if (partner[GetGlobalInt(52)].hp>partner[GetGlobalInt(52)].maxhp)
				partner[GetGlobalInt(52)].hp=partner[GetGlobalInt(52)].maxhp;
		  hptext(powers[chakra[partner[GetGlobalInt(11)].chakratype].power[3]].str,character[partner[GetGlobalInt(52)].view].x,1664);
		  
		  SetGlobalInt(8, GetGlobalInt(8)-(powers[chakra[partner[GetGlobalInt(11)].chakratype].power[3]].cost));
		  
			GUIOff(6);
      GUIOff(23);
		  SetGlobalInt(12, GetGlobalInt(12)+1);
				if (GetGlobalInt(12)>2) 
					SetGlobalInt(12,0);
				SetGlobalInt(11, 1);
		  }// end of if healing
		  
	}
	else if ((Chosenbutton==chkd) && (GetGlobalInt(8)>=powers[chakra[partner[GetGlobalInt(11)].chakratype].power[4]].cost) && powers[chakra[partner[GetGlobalInt(11)].chakratype].power[4]].on==1)
	{
	  if (powers[chakra[partner[GetGlobalInt(11)].chakratype].power[4]].type>=1) //hurting power
	  {
    int tempattack=(powers[chakra[partner[GetGlobalInt(11)].chakratype].power[4]].str);//+Random(GetGlobalInt(7));
			if (chakra[partner[GetGlobalInt(11)].chakratype].weak==monsters[monsterset[GetGlobalInt(10)].index[monsterindex]].montype)
				tempattack-=tempattack/2;
			else if (chakra[monsters[monsterset[GetGlobalInt(10)].index[monsterindex]].montype].weak==partner[GetGlobalInt(11)].chakratype)
				tempattack+=tempattack/2;
		tempattack+=(tempattack/2)*chakra[partner[GetGlobalInt(11)].chakratype].level;
		tempattack-=monsters[GetGlobalInt(10)].chidef;		
			  SetGlobalInt(8, GetGlobalInt(8)-(powers[chakra[partner[GetGlobalInt(11)].chakratype].power[4]].cost));
				string buffer;
        GetGlobalString(partner[GetGlobalInt(11)].name,buffer);
        StrCat(buffer," attacks");
        warning2=CreateTextOverlay(121,15,100,3,65500,buffer);
        Wait(25);
        RemoveOverlay(warning2);
				PlaySound(5);
				hurt_monster();
				PlaySound(3);
				hptext(tempattack,character[1].x,65440);
				monsterset[GetGlobalInt(10)].battleHP[monsterindex]-=tempattack;

       GUIOff(6);
       GUIOff(23);
			if (monsterset[GetGlobalInt(10)].battleHP[monsterindex]<1)
			{
	      SetGlobalInt(13, 1);
	     
		  }
			else
			{
				SetGlobalInt(12, GetGlobalInt(12)+1);
				if (GetGlobalInt(12)>2) 
					SetGlobalInt(12,0);
				SetGlobalInt(11, 1);
			}
			} //end of if hurting power
		else if (powers[chakra[partner[GetGlobalInt(11)].chakratype].power[4]].type==0) //healing
		{
		  partner[0].hp+=powers[chakra[partner[GetGlobalInt(11)].chakratype].power[4]].str;
		  if (partner[0].hp>partner[0].maxhp)
				partner[0].hp=partner[0].maxhp;
		  hptext(powers[chakra[partner[GetGlobalInt(11)].chakratype].power[4]].str,character[partner[0].view].x,1664);
			partner[GetGlobalInt(52)].hp+=powers[chakra[partner[GetGlobalInt(11)].chakratype].power[4]].str;
		  if (partner[GetGlobalInt(52)].hp>partner[GetGlobalInt(52)].maxhp)
				partner[GetGlobalInt(52)].hp=partner[GetGlobalInt(52)].maxhp;
		  hptext(powers[chakra[partner[GetGlobalInt(11)].chakratype].power[4]].str,character[partner[GetGlobalInt(52)].view].x,1664);
		  
		  SetGlobalInt(8, GetGlobalInt(8)-(powers[chakra[partner[GetGlobalInt(11)].chakratype].power[4]].cost));
		  
			GUIOff(6);
      GUIOff(23);
		  SetGlobalInt(12, GetGlobalInt(12)+1);
				if (GetGlobalInt(12)>2) 
					SetGlobalInt(12,0);
				SetGlobalInt(11, 1);
		  }// end of if healing
		  
	}
	else
			{
				warning2=CreateTextOverlay(121,15,200,3,65500,"Not enough CHI");
					Wait(25);
        RemoveOverlay(warning2);
			} //end of pressing anywhere
}


function drawtile(int tile)
{
int ix=0;
int iy=0;
int current_tile=tile;
int counter=0;
while (counter==0)
{
  if (tile>6)
	{
		tile-=6;
    iy+=1;
   }
  else
  {
    counter=1;
   }
}
    ix=tile-1;
RawDrawImage(0+(75*(ix)),3+(75*iy), cave[GetGlobalInt(190)].tile[current_tile]+195);
}

function SetMissionGUI()
{
 lsMission.TopItem=0;
 lsType.TopItem=0;
}

function setgui2() //sets up the character info GUI
{
  string buffer;
  string buffer2;
  
  StrFormat(buffer, "%d", partner[GetGlobalInt(53)].hp +swords[partner[GetGlobalInt(53)].weaponID].hp 
							+ rings[partner[GetGlobalInt(53)].ringID].hp + shields[partner[GetGlobalInt(53)].shieldID].hp); 
  StrFormat(buffer2, " / %d",partner[GetGlobalInt(53)].maxhp+ swords[partner[GetGlobalInt(53)].weaponID].hp 
							+ rings[partner[GetGlobalInt(53)].ringID].hp + shields[partner[GetGlobalInt(53)].shieldID].hp);
  StrCat(buffer,buffer2);
  SetLabelText(2,4,buffer);   //shows HP in status bar
//show chi level in status bar
	
  StrFormat(buffer, "%d", (partner[GetGlobalInt(53)].strength + swords[partner[GetGlobalInt(53)].weaponID].str 
							+ rings[partner[GetGlobalInt(53)].ringID].str + shields[partner[GetGlobalInt(53)].shieldID].str));
  SetLabelText(2,6,buffer); //shows STR and weapon strength
	
  StrFormat(buffer, "%d", (partner[GetGlobalInt(53)].defense+shields[partner[GetGlobalInt(53)].shieldID].def + swords[partner[GetGlobalInt(53)].weaponID].def 
							+ rings[partner[GetGlobalInt(53)].ringID].def));
  SetLabelText(2,7,buffer); //shows DEF
	
  StrFormat(buffer, "%d", partner[GetGlobalInt(53)].level);
  SetLabelText(2,10,buffer); //shows LVL
	
  StrFormat(buffer, "%d", partner[GetGlobalInt(53)].exp);
  SetLabelText(2,13,buffer); //shows EXP
	
  StrFormat(buffer, "%d", partner[GetGlobalInt(53)].levelup-partner[GetGlobalInt(53)].exp);
  SetLabelText(2,14,buffer); //shows EXP
	
  StrFormat(buffer, "%d", partner[GetGlobalInt(53)].chi); 
  SetLabelText(2,17,buffer); //show chi level in status bar
  
  StrFormat(buffer, "%d", partner[GetGlobalInt(53)].speed); 
  SetLabelText(2,24,buffer); //show chi level in status bar
  
  GetGlobalString(partner[GetGlobalInt(53)].name,buffer);
  SetLabelText(2,19,buffer);
  
  SetButtonPic (2, 18, 1, partner[GetGlobalInt(53)].sprite);
  int tempnum=GetInvGraphic(swords[partner[GetGlobalInt(53)].weaponID].index);
  SetButtonPic (2, 20, 1, tempnum);
  tempnum=GetInvGraphic(shields[partner[GetGlobalInt(53)].shieldID].index);
  SetButtonPic (2, 21, 1, tempnum);
  tempnum=GetInvGraphic(rings[partner[GetGlobalInt(53)].ringID].index);
  SetButtonPic (2, 22, 1, tempnum); 
  
  //********************set chakra GUI**********************
  if (partner[GetGlobalInt(53)].chakratype==0)
		StrCopy(buffer, "No Chakra");
  else
		GetGlobalString(chakra[partner[GetGlobalInt(53)].chakratype].chakraname, buffer);
  SetLabelText(21, 0, buffer);
  
  StrFormat(buffer, "%d", chakra[partner[GetGlobalInt(53)].chakratype].level);
  SetLabelText(21,5,buffer);
  
  StrFormat(buffer, "%d", chakra[partner[GetGlobalInt(53)].chakratype].exp);
  SetLabelText(21,6,buffer);
  //*********************set power GUI***********************
  string templabel;
		GetGlobalString(powers[chakra[partner[GetGlobalInt(53)].chakratype].power[1]].powername, templabel);
		SetLabelText(29, 0, templabel);
		StrFormat(templabel,"%d",powers[chakra[partner[GetGlobalInt(53)].chakratype].power[1]].cost);
		SetLabelText(29, 12, templabel);
		StrFormat(templabel,"%d",powers[chakra[partner[GetGlobalInt(53)].chakratype].power[1]].str);
		SetLabelText(29, 13, templabel);
		if (powers[chakra[partner[GetGlobalInt(53)].chakratype].power[2]].on==1)
		{
		  GetGlobalString(powers[chakra[partner[GetGlobalInt(53)].chakratype].power[2]].powername, templabel);
		SetLabelText(29, 3, templabel);
		StrFormat(templabel,"%d",powers[chakra[partner[GetGlobalInt(53)].chakratype].power[2]].cost);
		SetLabelText(29, 14, templabel);
		StrFormat(templabel,"%d",powers[chakra[partner[GetGlobalInt(53)].chakratype].power[2]].str);
		SetLabelText(29, 15, templabel);
		}
		if (powers[chakra[partner[GetGlobalInt(53)].chakratype].power[3]].on==1)
		{
		  GetGlobalString(powers[chakra[partner[GetGlobalInt(53)].chakratype].power[3]].powername, templabel);
		SetLabelText(29, 6, templabel);
		StrFormat(templabel,"%d",powers[chakra[partner[GetGlobalInt(53)].chakratype].power[3]].cost);
		SetLabelText(29, 16, templabel);
		StrFormat(templabel,"%d",powers[chakra[partner[GetGlobalInt(53)].chakratype].power[3]].str);
		SetLabelText(29, 17, templabel);
		}
		if (powers[chakra[partner[GetGlobalInt(53)].chakratype].power[4]].on==1)
		{
		  GetGlobalString(powers[chakra[partner[GetGlobalInt(53)].chakratype].power[4]].powername, templabel);
		SetLabelText(29, 9, templabel);
		StrFormat(templabel,"%d",powers[chakra[partner[GetGlobalInt(53)].chakratype].power[4]].cost);
		SetLabelText(29, 18, templabel);
		StrFormat(templabel,"%d",powers[chakra[partner[GetGlobalInt(53)].chakratype].power[4]].str);
		SetLabelText(29, 19, templabel);
		}
 }
 function set_partner(int temppart)
{
  SetGlobalInt(52,temppart);
}

function set_date(int daynum)
{
  SetGlobalInt(200,GetGlobalInt(200)+daynum);
  if (GetGlobalInt(200)>30)
  {
    SetGlobalInt(200,GetGlobalInt(200)-30);
    SetGlobalInt(201,GetGlobalInt(201)+1);
  }
  if (GetGlobalInt(201)==13)
  {
	  SetGlobalInt(201,1);
	  SetGlobalInt(202,GetGlobalInt(202)+1);
	}
  SetGlobalInt(204,GetGlobalInt(204)+daynum);
  string tempstr;
	string tempstr2;
	StrFormat(tempstr, "%d", GetGlobalInt(200));
	if (GetGlobalInt(200)==1)
		StrCopy(tempstr2, "st ");
	else if (GetGlobalInt(200)==2)
		StrCopy(tempstr2, "nd ");
	else if (GetGlobalInt(200)==3)
		StrCopy(tempstr2, "rd ");
	else
		StrCopy(tempstr2, "th ");
	StrCat(tempstr, tempstr2);
	SetLabelText(0,0,tempstr);
	
	int i=1;
	int minusplus=0;
	
	while (i<8)
	{
	  minusplus=Random(10);
	  if (minusplus>5)
			trade[i].water+=Random(3);
		else
		  trade[i].water-=Random(3);
		minusplus=Random(10);
		if (trade[i].water<2)
			trade[i].water=trade[i].watermod;
	  if (minusplus>5)
			trade[i].fruit+=Random(3);
		else
		  trade[i].fruit-=Random(3);
		 if (trade[i].fruit<2)
			trade[i].fruit=trade[i].fruitmod;
		minusplus=Random(10);
	  if (minusplus>5)
			trade[i].meat+=Random(3);
		else
		  trade[i].meat-=Random(3);
		 if (trade[i].meat<2)
			trade[i].meat=trade[i].meatmod;
		minusplus=Random(10);
	  if (minusplus>5)
			trade[i].wood+=Random(3);
		else
		  trade[i].wood-=Random(3);
		 if (trade[i].wood<2)
			trade[i].wood=trade[i].woodmod;
		minusplus=Random(10);
	  if (minusplus>5)
			trade[i].textile+=Random(3);
		else
		  trade[i].textile-=Random(3);
		if (trade[i].textile<2)
			trade[i].textile=trade[i].textilemod;
		minusplus=Random(10);
	  if (minusplus>5)
			trade[i].metal+=Random(3);
		else
		  trade[i].metal-=Random(3);
		if (trade[i].metal<2)
			trade[i].metal=trade[i].metalmod;
	  i++;
	}
	
	if (GetGlobalInt(201)==1)
	{
		StrCopy(tempstr, "January");
		trade[1].wood=trade[1].woodmod;
		trade[4].wood=trade[4].woodmod;
		trade[5].metal=trade[5].metalmod;
	}
	if (GetGlobalInt(201)==2)
	{
		StrCopy(tempstr, "February");
		trade[2].water=trade[2].watermod;
		trade[3].textile=trade[3].textilemod;
		trade[4].textile=trade[4].textilemod;
		trade[5].water=trade[5].watermod;
	}
	if (GetGlobalInt(201)==3)
	{
		StrCopy(tempstr, "March");
		trade[1].meat=trade[1].meatmod;
		trade[2].fruit=trade[2].fruitmod;
		trade[3].meat=trade[3].meatmod-Random(10);
		trade[4].metal=trade[4].metalmod;
		trade[5].wood=trade[5].woodmod;
		trade[6].textile=trade[6].textilemod;
	}
	if (GetGlobalInt(201)==4)
	{
		StrCopy(tempstr, "April");
		trade[1].water=trade[1].watermod+Random(10);
		trade[2].meat=trade[2].meatmod;
		trade[3].fruit=trade[3].fruitmod-Random(10);
		trade[5].meat=trade[5].meatmod;
		trade[6].water=trade[6].watermod;
	}
	if (GetGlobalInt(201)==5)
	{
		StrCopy(tempstr, "May");
		trade[1].fruit=trade[1].fruitmod-Random(10);
		trade[2].textile=trade[2].textilemod+Random(10);
		trade[3].metal=trade[3].metalmod;
		trade[4].water=trade[4].watermod;
		trade[6].metal=trade[6].metalmod+Random(10);
	}
	if (GetGlobalInt(201)==6)
	{
		StrCopy(tempstr, "June");
		trade[1].textile=trade[1].textilemod;
		trade[2].wood=trade[2].woodmod;
		trade[3].wood=trade[3].woodmod;
		trade[4].fruit=trade[4].fruitmod;
		trade[5].fruit=trade[5].fruitmod;
		trade[6].wood=trade[6].woodmod;
	}
	if (GetGlobalInt(201)==7)
	{
		StrCopy(tempstr, "July");
		trade[1].wood=trade[1].woodmod-Random(10);
		trade[5].metal=trade[5].metalmod-Random(10);
		trade[6].fruit=trade[6].fruitmod;
	}
	if (GetGlobalInt(201)==8)
	{
		StrCopy(tempstr, "August");
		trade[1].metal=trade[1].metalmod-Random(10);
		trade[3].fruit=trade[3].fruitmod;
		trade[5].textile=trade[5].textilemod-Random(10);
		trade[6].textile=trade[6].textilemod;
	}
	if (GetGlobalInt(201)==9)
	{
		StrCopy(tempstr, "September");
		trade[1].fruit=trade[1].fruitmod;
		trade[2].meat=trade[2].meatmod+Random(10);
		trade[3].meat=trade[3].meatmod;
		trade[4].meat=trade[4].meatmod;
		trade[5].wood=trade[5].woodmod-Random(10);
		trade[6].meat=trade[6].meatmod;
	}
  if (GetGlobalInt(201)==10)
  {
		StrCopy(tempstr, "October");
		trade[1].metal=trade[1].metalmod;
		trade[2].water=trade[2].watermod-Random(10);
		trade[3].water=trade[3].watermod;
		trade[4].fruit=trade[4].fruitmod+Random(10);
		trade[5].wood=trade[5].woodmod+Random(10);
		trade[6].metal=trade[6].metalmod;
	}
	if (GetGlobalInt(201)==11)
	{
		StrCopy(tempstr, "November");
		trade[1].water=trade[1].watermod;
		trade[2].metal=trade[2].metalmod;
		trade[3].metal=trade[3].metalmod+Random(10);
		trade[4].textile=trade[4].textilemod-Random(10);
	}
	if (GetGlobalInt(201)==12)
	{
		StrCopy(tempstr, "December");
		trade[1].meat=trade[1].meatmod+Random(10);
		trade[2].textile=trade[2].textilemod;
		trade[3].wood=trade[3].woodmod+Random(10);
		trade[4].water=trade[4].watermod-Random(10);
		trade[5].textile=trade[5].textilemod;
	}
	SetLabelText(0,1,tempstr);
	
	StrFormat(tempstr," ");
	StrFormat(tempstr2, "%d", GetGlobalInt(202)+1000);
	StrCat(tempstr, tempstr2);
	SetLabelText(0,2,tempstr);
}

function statusmessage()
{
 	string lvlstr;
	string buffer;
	string buffer2;
	int fullchi;
	int currentchi;

	fullchi=partner[0].maxchi+partner[1].maxchi;
	currentchi=partner[0].chi+partner[1].chi;
	
	if (GetGlobalInt(11)!=-1)
	{
	StrFormat (buffer, "HP %d", partner[0].hp); 
	StrFormat (buffer2,"/%d", partner[0].maxhp);
	StrCat(buffer,buffer2);
	SetLabelText(3,0,buffer);  //shows HP in status bar 	
	//SetLabelText(3,1,buffer);  //shows CHI in status bar 	
	
	StrFormat (buffer, "HP %d", partner[1].hp); 
	StrFormat (buffer2,"/%d", partner[1].maxhp);
	StrCat(buffer,buffer2);
	SetLabelText(5,0,buffer);  //shows HP in status bar 
	
	StrFormat (buffer, "CHI %d", GetGlobalInt(8)); 
	StrFormat (buffer2,"/%d", GetGlobalInt(7));
	StrCat(buffer,buffer2);
	SetLabelText(11,0,buffer);  //shows CHI in status bar 
	}
}

function level_up(int which)
{
  int next_exp=partner[which].levelup;
  int mod=partner[which].mod;
  int level=partner[which].level;
  int statmod=mod/20;
  int tempstr=partner[which].strength;
  
  next_exp += next_exp+((mod*(level*level))/5);
  level+=1;
  if (next_exp<0)
		Display("Problem!");
		
  partner[which].level=level;
  partner[which].levelup=next_exp; 

if (partner[which].binmod==0)   //level up strength and def and chi
{
  tempstr=partner[which].maxchi;
  tempstr=tempstr/100;
	tempstr=tempstr*partner[which].chimod;
	tempstr+=1;
	partner[which].binmod=1;
	partner[which].strength+=statmod/2;
	partner[which].defense+=(statmod*level)/2;
	partner[which].chi+=tempstr;
	}
else 
{
  tempstr=tempstr/100;
	tempstr=tempstr*partner[which].strmod;
	tempstr+=1;
	partner[which].binmod=0;
	partner[which].strength+=tempstr+1;
	partner[which].chi+=statmod/4;
}
	
	//level up chi
	
  statmod+=(level*2);
  
  tempstr=partner[which].maxhp;
  tempstr=tempstr/100;
	tempstr=tempstr*partner[which].hpmod;
	tempstr+=1;
  partner[which].maxhp+=tempstr;
  partner[which].hp=partner[which].maxhp;
 
if (level==partner[which].nextmod)
{
  int tempmod=partner[which].mod;
  tempmod+=(tempmod/10)+level;
  partner[which].mod=tempmod;
  partner[which].nextmod+=(partner[which].nextmod+tempmod)/2;
}
   
}

function chakralevelup()
{
    chakra[partner[0].chakratype].level+=1;
  chakra[partner[0].chakratype].exp=0;
  string tempbuffer1;
  GetGlobalString(chakra[partner[0].chakratype].chakraname, tempbuffer1);
  StrCat(tempbuffer1, " chakra level up");
  Display(tempbuffer1);
  if (chakra[partner[0].chakratype].level==3 || chakra[partner[0].chakratype].level==8 || chakra[partner[0].chakratype].level==20)
  {
    if(chakra[partner[0].chakratype].power[4]==0)
    {
		Display("You have unlocked a new power!");
		GUIOn(27);
		}
  }
  else
  {
    string tempname;
    Display("You can upgrade a power!");
    GetGlobalString(powers[chakra[partner[0].chakratype].power[1]].powername, tempname);
    SetLabelText(28, 0, tempname);
    if (powers[chakra[partner[0].chakratype].power[2]].on==1)
    {
      GetGlobalString(powers[chakra[partner[0].chakratype].power[2]].powername, tempname);
			SetLabelText(28, 4, tempname);
		}
		else SetLabelText(28, 4, "Not available");
		
		if (powers[chakra[partner[0].chakratype].power[3]].on==1)
    {
      GetGlobalString(powers[chakra[partner[0].chakratype].power[3]].powername, tempname);
			SetLabelText(28, 5, tempname);
		}
		else SetLabelText(28, 5, "Not available");
		
		if (powers[chakra[partner[0].chakratype].power[4]].on==1)
    {
      GetGlobalString(powers[chakra[partner[0].chakratype].power[4]].powername, tempname);
			SetLabelText(28, 6, tempname);
		}
		else SetLabelText(28, 6, "Not available");
		
    GUIOn(28);
  }
}

function slow_text(string toptext,int overcount,int textx, int texty,int font,int fontcolor)
{
  string toptextcut;
  int toptextlen;
  int i = 1;
  if (overcount==1) 
{
  over1=CreateTextOverlay(textx,texty,400,font,fontcolor,"");
}
  if (overcount==3)
{
  over2=CreateTextOverlay(textx,texty,400,font,fontcolor,"");
}    
  //Wait(50);
  toptextlen=StrLen(toptext);
  while (i<=toptextlen)
  {
	  StrCopy(toptextcut, toptext);
	  StrSetCharAt(toptextcut,i,0);
	  Wait(3);
	  if (overcount<3) SetTextOverlay (over1, textx,texty,400,font,fontcolor,toptextcut);
	  else SetTextOverlay (over2, textx,texty,400,font,fontcolor,toptextcut);
	  i++;
   }
 Wait(GetGlobalInt(203));
 if (overcount==2)
 {
		RemoveOverlay(over1);
	}
 if (overcount==4)
 {
		RemoveOverlay(over2);
	}
}

function introtext(string buffer, int xstart, int ystart)
{
  int overhp=CreateTextOverlay(xstart,ystart,200,3,65543,buffer);
  int i=100;
  while (i>0)
  {
  SetTextOverlay(overhp,xstart,ystart,200,3,65543,buffer);
  i=i-2;
  Wait(1);
  }
  RemoveOverlay(overhp);
}


function use_item(int index)
{
  if (GetInvProperty(index, "type")==0)  //health cure
  {

  if (partner[GetGlobalInt(53)].hp!=partner[GetGlobalInt(53)].maxhp)
  {
  partner[GetGlobalInt(53)].hp+=GetInvProperty(index,"strength");
		if (partner[GetGlobalInt(53)].hp>partner[GetGlobalInt(53)].maxhp)
		{
			partner[GetGlobalInt(53)].hp=partner[GetGlobalInt(53)].maxhp;
		}
	if (player.room==2)
		hptext(GetInvProperty(index,"strength"),character[partner[GetGlobalInt(53)].view].x,1664);
	setgui2();
	PlaySound(GetInvProperty(index,"kind"));
  LoseInventoryFromCharacter(2,index);
  gItemsgui.Visible=false;
  SetGlobalInt(12, GetGlobalInt(12)+1);   //for ending the turn in battle
           if (GetGlobalInt(12)>2) SetGlobalInt(12,0); //for ending the turn in battle
	}
	else
		Display("character is already at full health");
	}
	

  if (GetInvProperty(index, "type")==1)  //chi cure
  {
	if (player.room==2)
	{
  if (GetGlobalInt(8)<GetGlobalInt(7))
  {
  SetGlobalInt(8,GetGlobalInt(8)+GetInvProperty(index,"strength"));
		if (GetGlobalInt(8)>GetGlobalInt(7))
			SetGlobalInt(8,GetGlobalInt(7));
	
	hptext(GetInvProperty(index,"strength"),character[partner[GetGlobalInt(53)].view].x,60480);
	setgui2();
	PlaySound(GetInvProperty(index,"kind"));
  LoseInventoryFromCharacter(2,index);
  gItemsgui.Visible=false;
  SetGlobalInt(12, GetGlobalInt(12)+1);   //for ending the turn in battle
           if (GetGlobalInt(12)>2) SetGlobalInt(12,0); //for ending the turn in battle
  }
	else
		Display("Chi already full");
	}//if playroom
	}//if chi cure
	if (GetInvProperty(index, "type")==2)  //cures caravan
  {

  if (GetGlobalInt(18)!=200)
  {
  SetGlobalInt(18,GetGlobalInt(18)+GetInvProperty(index,"strength"));
		if (GetGlobalInt(18)>200)
		{
			SetGlobalInt(18,200);
		}
	if (player.room==2)
	hptext(GetInvProperty(index,"strength"),character[35].x,60480);
	setgui2();
	PlaySound(GetInvProperty(index,"kind"));
  LoseInventoryFromCharacter(2,index);
  gItemsgui.Visible=false;
  SetGlobalInt(12, GetGlobalInt(12)+1);   //for ending the turn in battle
           if (GetGlobalInt(12)>2) SetGlobalInt(12,0); //for ending the turn in battle
	}
	else
		Display("Caravan bearer is not hungry");
	}
	
	if (GetInvProperty(index, "type")==3) //soul crystal
{
  SetGlobalInt(3, index);
  GUIOn(32); //
  
} 
//SetCursorMode(eModeWalkto);
statusmessage();
} 
 
function equip_item(int index) 
{
 if (GetInvProperty(index,"type")==0)  //str item
 {
   if (partner[GetGlobalInt(53)].weaponID!=GetInvProperty(index, "strength"))
   {
     if (partner[GetGlobalInt(53)].weaponID!=0)
     {
       AddInventoryToCharacter(partner[GetGlobalInt(53)].view,swords[partner[GetGlobalInt(53)].weaponID].index);
      }
    partner[GetGlobalInt(53)].weaponID=GetInvProperty(index, "strength");
    
    LoseInventoryFromCharacter(partner[GetGlobalInt(53)].view,index); //the character's inventory
    setgui2();
    }
 else
 {
   string tempstr;
   GetInvName(index, tempstr);
   StrCat(tempstr," is already equipped");
    Display(tempstr);
  }//end of else to if it is equipped already
 }//end of if it is a weapon
 
  if (GetInvProperty(index,"type")==1)  //defense item
 {
   if (partner[GetGlobalInt(53)].shieldID!=GetInvProperty(index, "strength"))
   {
    partner[GetGlobalInt(53)].shieldID=GetInvProperty(index, "strength");
    LoseInventoryFromCharacter(4,index); //inventory character 4 carries the party's shields
    setgui2();
    }
 else
 {
   string tempstr;
   GetInvName(index, tempstr);
   StrCat(tempstr," is already equipped");
    Display(tempstr);
  }//end of else to if it is equipped already
 }//end of if it is a shield

if (GetInvProperty(index,"type")==2) 
{
  if (partner[GetGlobalInt(53)].ringID!=GetInvProperty(index, "strength"))
  {
  partner[GetGlobalInt(53)].ringID=GetInvProperty(index, "strength"); //points to ring struct
  LoseInventoryFromCharacter(3,index);
  setgui2();
   }
 else
 {
   string tempstr;
   GetInvName(index, tempstr);
   StrCat(tempstr," is already equipped");
    Display(tempstr);
  }
}//end of if it's a ring

statusmessage();
gWeaponsgui.Visible=false;
gShieldsgui.Visible=false;
gRingsgui.Visible=false;
}//end of function equip

function character_hit(int damage, int which)
{
	partner[which].hp-=damage;
	if(partner[which].hp<0)
	{
	  string GameOver;
	  StrCopy(GameOver, "game over");
	  slow_text(GameOver, 1, 110, 110, 3, 63488);
	  QuitGame(0);
	  }
}

function monster_set(int temp1,int temp2,int temp3)
{
	monHP=temp1;
	monSTR=temp2;
	monTYPE=temp3;
}

#sectionstart game_start  // DO NOT EDIT OR REMOVE THIS LINE
function game_start() {
  // called when the game starts, before the first room is loaded
  
  //**************************************************************************************
  //****				GUI SETUP				      ****
  //**************************************************************************************
  
	game.swap_portrait=1;
	SetSpeechFont(3);
	SetNormalFont(3);
	SetGUITransparency(8, 70);
	statusmessage();
	game.top_bar_bordercolor=0;
	game.top_bar_borderwidth=0;
	game.dialog_options_x = 10;
	game.dialog_options_y = 10;
	game.show_single_dialog_option =1;
	mouse.DisableMode(eModeUseinv);
	
	GUIOff(4);
	GUIOff(9);
	GUIOff(3);
	GUIOff(1);
	GUIOff(5);
	GUIOff(6);
	GUIOff(0);
	GUIOff(7);
	GUIOff(10);
	GUIOff(11);
	GUIOff(12);
	GUIOff(16);
	GUIOff(17);
	GUIOff(18);
	GUIOff(19);
	GUIOff(27);
	GUIOff(28);
	
	gWeaponsgui.Visible=false;
	gShieldsgui.Visible=false;
	gRingsgui.Visible=false;
	
	iteminv.CharacterToUse=cItems;
	itemshop.CharacterToUse=cShopitem;
	AddInventoryToCharacter(8,28);
	AddInventoryToCharacter(8,29);
	AddInventoryToCharacter(8,30);
	AddInventoryToCharacter(8,31);
	AddInventoryToCharacter(8,32);
	AddInventoryToCharacter(8,33);
	AddInventoryToCharacter(8,34);
  AddInventoryToCharacter(5,3);
	AddInventoryToCharacter(5,26);
	AddInventoryToCharacter(5,27);
	AddInventoryToCharacter(5,8);
	AddInventoryToCharacter(5,7);
	AddInventoryToCharacter(6,13);
	AddInventoryToCharacter(6,14);
	AddInventoryToCharacter(6,6);
	AddInventoryToCharacter(6,16);
	AddInventoryToCharacter(6,19);
	AddInventoryToCharacter(6,21);
	AddInventoryToCharacter(6,23);
	AddInventoryToCharacter(6,24);
	AddInventoryToCharacter(6,25);
	
  AddInventoryToCharacter(7,2);
  AddInventoryToCharacter(8,5);
	
  SetInvDimensions(25,25);
	cEgo.AddInventory(issword);
	cBrother.AddInventory(iaxe);
	AddInventoryToCharacter(2,3);	
	AddInventoryToCharacter(2,35);
	
	cShields.AddInventory(ishield);
	cRings.AddInventory(ipring);

  //**************************************************************************************
  //****				ARRAYS SETUP				      ****
  //**************************************************************************************
	
	int setcounter=0;
	while (setcounter<8)
	{
	  chakra[setcounter].level=1;
	  chakra[setcounter].exp=0;
	 setcounter++; 
    }
    setcounter=0;
	while (setcounter<5)
	{
	  partner[setcounter].level=1;
	  partner[setcounter].exp=0;
	  partner[setcounter].name=setcounter+1;
	  setcounter++; 
       }
       //neutral
			 chakra[0].weak=0; //neutral
			 //earth
       chakra[1].power[1]=1;
       chakra[1].power[2]=0;
       chakra[1].power[3]=0;
       chakra[1].power[4]=0;
       chakra[1].weak=4;
       chakra[1].chakraname=3;
       //water
       chakra[2].power[1]=2;
       chakra[2].power[2]=0;
       chakra[2].power[3]=0;
       chakra[2].power[4]=0;
       chakra[2].weak=1;
       chakra[2].chakraname=4;
			 //fire
			 chakra[3].power[1]=3;
			 chakra[3].power[2]=0;
       chakra[3].power[3]=0;
       chakra[3].power[4]=0;
       chakra[3].weak=2;
       chakra[3].chakraname=5;
       //air
       chakra[4].power[1]=4;
       chakra[4].power[2]=0;
       chakra[4].power[3]=0;
       chakra[4].power[4]=0;
       chakra[4].weak=3;
       chakra[4].chakraname=6;

			 powers[0].on=0; //no power
			 
       powers[1].str=40; //Rock blast
       powers[1].powername=8;
       powers[1].cost=10;
       powers[1].on=1;
       powers[1].type=1; //hurts small
       
       powers[2].str=400; //water blast
       powers[2].powername=9;
       powers[2].cost=10;
       powers[2].on=1;
       powers[2].type=1; //hurts
       
       powers[3].str=40; //fire blast
       powers[3].powername=10;
       powers[3].cost=10;
       powers[3].on=1;
       powers[3].type=1; //hurts
       
       powers[4].str=40; //wind blast
       powers[4].powername=11;
       powers[4].cost=10;
       powers[4].on=1;
       powers[4].type=1; //hurts
       
       powers[5].str=50; //healing cure
       powers[5].powername=12;
       powers[5].cost=15;
       powers[5].on=1;
       powers[5].type=0; //heals
       
       powers[6].str=70; //Earthquake
       powers[6].powername=13;
       powers[6].cost=30;
       powers[6].on=1;
       powers[6].type=2; //hurts more
       
       powers[7].str=70; //flood
       powers[7].powername=14;
       powers[7].cost=30;
       powers[7].on=1;
       powers[7].type=2; //hurts
       
       powers[8].str=70; //lava flow
       powers[8].powername=15;
       powers[8].cost=30;
       powers[8].on=1;
       powers[8].type=2; //hurts
       
       powers[9].str=70; //tornado
       powers[9].powername=16;
       powers[9].cost=30;
       powers[9].on=1;
       powers[9].type=2; //hurts
       
       powers[10].str=200; //meteorite
       powers[10].powername=17;
       powers[10].cost=60;
       powers[10].on=1;
       powers[10].type=3; //hurts max
       
       powers[11].str=200; //tsunami
       powers[11].powername=18;
       powers[11].cost=60;
       powers[11].on=1;
       powers[11].type=3; //hurts
       
       powers[12].str=200; //Atomic
       powers[12].powername=19;
       powers[12].cost=60;
       powers[12].on=1;
       powers[12].type=3; //hurts
       
       powers[13].str=200; //space
       powers[13].powername=30;
       powers[13].cost=60;
       powers[13].on=1;
       powers[13].type=3; //hurts
       
       powers[14].str=500; //Kunda
       powers[14].powername=31;
       powers[14].cost=100;
       powers[14].on=1;
       powers[14].type=4; //hurts Kunda
       
       powers[15].str=100; //healing cura
       powers[15].powername=32;
       powers[15].cost=25;
       powers[15].on=1;
       powers[15].type=0; //heals
       
       powers[16].str=200; //healing curaga
       powers[16].powername=33;
       powers[16].cost=35;
       powers[16].on=1;
       powers[16].type=0; //heals
       
       powers[17].str=500; //healing curagall
       powers[17].powername=34;
       powers[17].cost=50;
       powers[17].on=1;
       powers[17].type=0; //heals
       
       PowerType[0]="Healing";
       PowerType[1]="Weak Attack";
       PowerType[2]="Standard Attack";
       PowerType[3]="Strong Attack";
       PowerType[4]="Chi attack";
       
       
       //you
			 partner[0].hp=200;
       partner[0].maxhp=200;
       partner[0].defense=31;
       partner[0].strength=15;
       partner[0].mp=50;
       partner[0].maxmp=50;
       partner[0].speed=5;
       partner[0].view=0;
       partner[0].levelup=20;
       partner[0].mod=78;
       partner[0].binmod=0;
       partner[0].nextmod=8;
       partner[0].strmod=5;
			 partner[0].hpmod=10;
			 partner[0].chimod=15;
       partner[0].maxchi=10;
       partner[0].chi=10;
       partner[0].weaponID=0;
       partner[0].weaponSTR=0;
       partner[0].shieldID=0;
       partner[0].shieldSTR=0;
       partner[0].ringID=0;
       partner[0].sprite=120;
       partner[0].chakratype=2; //water
       
       //brother
       partner[1].hp=170;
       partner[1].maxhp=170;
       partner[1].defense=25;
       partner[1].strength=18;
       partner[1].mp=15;
       partner[1].maxmp=15;
       partner[1].speed=2;
       partner[1].view=18;
       partner[1].levelup=30;
       partner[1].mod=60;
       partner[1].binmod=0;
       partner[1].nextmod=12;
       partner[1].strmod=10;
			 partner[1].hpmod=6;
			 partner[1].chimod=2;
       partner[1].maxchi=10;
       partner[1].chi=10;
       partner[1].weaponID=0;
       partner[1].weaponSTR=0; //NOT USED
       partner[1].shieldID=0;
       partner[1].shieldSTR=0; //NOT USED
       partner[1].ringID=0;
       partner[1].sprite=121;
       partner[1].chakratype=0; //no chakra
       
       swords[0].str=0;
       swords[0].def=0;
       swords[0].hp=0;
       swords[0].mp=0;
       swords[0].chi=0;
       swords[0].speed=0;
       swords[0].index=4; //points to inv number
       
       swords[2].str=3; //small knife
       swords[2].def=0;
       swords[2].hp=0;
       swords[2].mp=0;
       swords[2].chi=1; //Chakra cost of using weapon
       swords[2].speed=2;
       swords[2].index=13; //points to inv number
       
       
       swords[3].str=5; //short sword
       swords[3].def=0;
       swords[3].hp=0;
       swords[3].mp=0;
       swords[3].chi=2; //Chakra cost of using weapon
       swords[3].speed=2;
       swords[3].index=1; //points to inv number
       
       swords[4].str=8; //Long sword
       swords[4].def=0;
       swords[4].hp=0;
       swords[4].mp=0;
       swords[4].chi=2; //Chakra cost of using weapon
       swords[4].speed=0;
       swords[4].index=14; //points to inv number
       
       swords[5].str=8; //Libra sword
       swords[5].def=2;
       swords[5].hp=0;
       swords[5].mp=0;
       swords[5].chi=3; //Chakra cost of using weapon
       swords[5].speed=0;
       swords[5].index=15; //points to inv number
       
       swords[6].str=12; //Iron sword
       swords[6].def=0;
       swords[6].hp=0;
       swords[6].mp=0;
       swords[6].chi=3; //Chakra cost of using weapon
       swords[6].speed=-1;
       swords[6].index=16; //points to inv number
       
       swords[7].str=10; //Fancy sword
       swords[7].def=2;
       swords[7].hp=2;
       swords[7].mp=0;
       swords[7].chi=3; //Chakra cost of using weapon
       swords[7].speed=0;
       swords[7].index=17; //points to inv number
       
       swords[8].str=15; //Rusty sword
       swords[8].def=-2;
       swords[8].hp=-2;
       swords[8].mp=-5;
       swords[8].chi=2; //Chakra cost of using weapon
       swords[8].speed=-2;
       swords[8].index=18; //points to inv number
       
       swords[9].str=20; //Silver sword
       swords[9].def=0;
       swords[9].hp=0;
       swords[9].mp=0;
       swords[9].chi=4; //Chakra cost of using weapon
       swords[9].speed=-3;
       swords[9].index=19; //points to inv number
       
       swords[10].str=22; //Black sword
       swords[10].def=-2;
       swords[10].hp=5;
       swords[10].mp=-10;
       swords[10].chi=2; //Chakra cost of using weapon
       swords[10].speed=-2;
       swords[10].index=20; //points to inv number
       
       swords[11].str=25; //2-handed sword
       swords[11].def=0;
       swords[11].hp=0;
       swords[11].mp=0;
       swords[11].chi=5; //Chakra cost of using weapon
       swords[11].speed=-10;
       swords[11].index=21; //points to inv number
       
       swords[12].str=30; //Gladiator sword
       swords[12].def=-5;
       swords[12].hp=0;
       swords[12].mp=-10;
       swords[12].chi=6; //Chakra cost of using weapon
       swords[12].speed=-5;
       swords[12].index=22; //points to inv number
       
       swords[13].str=25; //Glass sword
       swords[13].def=0;
       swords[13].hp=0;
       swords[13].mp=0;
       swords[13].chi=4; //Chakra cost of using weapon
       swords[13].speed=0;
       swords[13].index=23; //points to inv number
       
       swords[14].str=15; //Fibre Glass sword
       swords[14].def=2;
       swords[14].hp=0;
       swords[14].mp=0;
       swords[14].chi=3; //Chakra cost of using weapon
       swords[14].speed=2;
       swords[14].index=24; //points to inv number
       
       swords[15].str=20; //Relic sword
       swords[15].def=5;
       swords[15].hp=5;
       swords[15].mp=5;
       swords[15].chi=5; //Chakra cost of using weapon
       swords[15].speed=-5;
       swords[15].index=25; //points to inv number
       
       swords[16].str=15; //Soul sword
       swords[16].def=15;
       swords[16].hp=15;
       swords[16].mp=0;
       swords[16].chi=8; //Chakra cost of using weapon
       swords[16].speed=0;
       swords[16].index=26; //points to inv number
       
       swords[17].str=15; //Emeral Knife
       swords[17].def=0;
       swords[17].hp=0;
       swords[17].mp=0;
       swords[17].chi=5; //Chakra cost of using weapon
       swords[17].speed=5;
       swords[17].index=27; //points to inv number
       
       swords[18].str=40; //Buster sword
       swords[18].def=-10;
       swords[18].hp=0;
       swords[18].mp=0;
       swords[18].chi=10; //Chakra cost of using weapon
       swords[18].speed=-10;
       swords[18].index=28; //points to inv number
       
       swords[19].str=35; //Elvish Rapier
       swords[19].def=-5;
       swords[19].hp=5;
       swords[19].mp=10;
       swords[19].chi=10; //Chakra cost of using weapon
       swords[19].speed=5;
       swords[19].index=29; //points to inv number
       
       swords[20].str=8;
       swords[20].def=0;
       swords[20].hp=0;
       swords[20].mp=0;
       swords[20].chi=3;
       swords[20].speed=2;
       swords[20].index=6; //points to inv number
       
       shields[0].str=0;
       shields[0].def=0;
       shields[0].hp=0;
       shields[0].mp=0;
       shields[0].speed=0;
       shields[0].index=4; //points to inv number
       
       shields[1].str=0;
       shields[1].def=4;
       shields[1].hp=0;
       shields[1].mp=0;
       shields[1].speed=0;
       shields[1].index=2; //points to inv number
       
       shields[2].str=0;
       shields[2].def=10;
       shields[2].hp=0;
       shields[2].mp=0;
       shields[2].speed=0;
       shields[2].index=2; //points to inv number
       
       rings[0].str=0;
       rings[0].def=0;
       rings[0].hp=0;
       rings[0].chi=0;
       rings[0].speed=0;
       rings[0].mp=0;
       rings[0].index=4; //points to inv number
       rings[0].chakra[0]=0;
       rings[0].chakra[1]=0;
       
       rings[1].str=2;
       rings[1].def=2;
       rings[1].hp=0;
       rings[1].chi=0;
       rings[1].speed=-5;
       rings[1].index=5; //points to inv number
       rings[1].chakra[0]=0;
       rings[1].chakra[1]=0;
       
       rings[2].str=0;
       rings[2].def=0;
       rings[2].hp=10;
       rings[2].chi=0;
       rings[2].speed=0;
       rings[2].mp=0;
       rings[2].index=28; //points to inv number
       rings[2].chakra[0]=0;
       rings[2].chakra[1]=0;

       rings[3].str=0;
       rings[3].def=2;
       rings[3].hp=2;
       rings[3].chi=0;
       rings[3].speed=2;
       rings[3].mp=0;
       rings[3].index=29; //points to inv number
       rings[3].chakra[0]=0;
       rings[3].chakra[1]=0;
       
       rings[4].str=15;
       rings[4].def=15;
       rings[4].hp=5;
       rings[4].chi=-5;
       rings[4].speed=0;
       rings[4].mp=0;
       rings[4].index=30; //points to inv number
       rings[4].chakra[0]=0;
       rings[4].chakra[1]=0;
       
       rings[5].str=0;
       rings[5].def=0;
       rings[5].hp=25;
       rings[5].chi=10;
       rings[5].speed=0;
       rings[5].mp=0;
       rings[5].index=31; //points to inv number
       rings[5].chakra[0]=0;
       rings[5].chakra[1]=0;
       
       rings[6].str=0;
       rings[6].def=5;
       rings[6].hp=5;
       rings[6].chi=10;
       rings[6].speed=5;
       rings[6].mp=0;
       rings[6].index=32; //points to inv number
       rings[6].chakra[0]=0;
       rings[6].chakra[1]=0;
       
       rings[7].str=0;
       rings[7].def=8;
       rings[7].hp=0;
       rings[7].chi=20;
       rings[7].speed=0;
       rings[7].mp=0;
       rings[7].index=33; //points to inv number
       rings[7].chakra[0]=0;
       rings[7].chakra[1]=0;
       
       rings[8].str=10;
       rings[8].def=10;
       rings[8].hp=10;
       rings[8].chi=-20;
       rings[8].speed=-10;
       rings[8].mp=0;
       rings[8].index=34; //points to inv number
       rings[8].chakra[0]=0;
       rings[8].chakra[1]=0;
       
       
       monsters[0].hp=20; //little eye
       monsters[0].str=60;
       monsters[0].def=15;
       monsters[0].chidef=10;
       monsters[0].randact[1]=1; //misses
       monsters[0].randact[2]=1; //misses
       monsters[0].spirit[1]=12;
       monsters[0].speed=3;
       monsters[0].monname=21; //
       monsters[0].monexp=6;
       monsters[0].lvl=2;
       monsters[0].index[0]=3; //very often gives potion
       monsters[0].index[1]=-1; //sometimes gives nothing
       monsters[0].index[2]=7; //rarely gives elixir
       monsters[0].view=4; 
       
       monsters[1].hp=30; //little ock
       monsters[1].str=55;
       monsters[1].def=10;
       monsters[1].chidef=20;
       monsters[1].randact[1]=1;  //misses
       monsters[1].randact[2]=1;  //misses
       monsters[1].spirit[1]=15;
       monsters[1].speed=5;
       monsters[1].monname=20; //octopus
       monsters[1].monexp=10;
       monsters[1].lvl=2;
       monsters[1].index[0]=3; //potion
       monsters[1].index[1]=3; //potion
       monsters[1].index[2]=3; //potion
       monsters[1].view=9;
       
       monsters[2].hp=45; //rock
       monsters[2].str=58;
       monsters[2].def=15;
       monsters[2].chidef=30;
       monsters[2].randact[1]=1;  //misses
       monsters[2].randact[2]=1;  //misses
       monsters[2].spirit[1]=15;
       monsters[2].speed=8;
       monsters[2].monname=22; //rock
       monsters[2].monexp=15;
       monsters[2].lvl=3;
       monsters[2].index[0]=3; //potion
       monsters[2].index[1]=3; //potion
       monsters[2].index[2]=27; //potion
       monsters[2].view=41;
       
       monsters[3].hp=60; //rabbit
       monsters[3].str=60;
       monsters[3].def=10;
       monsters[3].chidef=35;
       monsters[3].randact[1]=1;  //misses
       monsters[3].randact[2]=1;  //misses
       monsters[3].spirit[1]=15;
       monsters[3].speed=12;
       monsters[3].monname=38;
       monsters[3].monexp=20;
       monsters[3].lvl=3;
       monsters[3].index[0]=3; //potion
       monsters[3].index[1]=26; //hay
       monsters[3].index[2]=-1; //nothing
       monsters[3].view=55;
       
       monsters[4].hp=75;  //ladybird
       monsters[4].str=70;
       monsters[4].def=10;
       monsters[4].chidef=20;
       monsters[4].randact[1]=1;  //misses
       monsters[4].randact[2]=1; 
       monsters[4].spirit[1]=15;
       monsters[4].speed=5;
       monsters[4].monname=36; //Lower Elemental
       monsters[4].monexp=35;
       monsters[4].lvl=2;
       monsters[4].index[0]=3; //potion
       monsters[4].index[1]=26; //hay
       monsters[4].index[2]=3; //potion
       monsters[4].view=52;
       
       monsters[5].hp=60; //mushroom
       monsters[5].str=50;
       monsters[5].def=20;
       monsters[5].chidef=35;
       monsters[5].randact[1]=1;  //misses
       monsters[5].randact[2]=1;  //misses
       monsters[5].spirit[1]=15;
       monsters[5].speed=12;
       monsters[5].monname=39;
       monsters[5].monexp=26;
       monsters[5].lvl=3;
       monsters[5].index[0]=3; //potion
       monsters[5].index[1]=26; //hay
       monsters[5].index[2]=-1; //nothing
       monsters[5].view=56;
       
       monsters[6].hp=120; //octo
       monsters[6].str=60;
       monsters[6].def=20;
       monsters[6].chidef=36;
       monsters[6].randact[1]=1;  //misses
       monsters[6].randact[2]=1;  //misses
       monsters[6].spirit[1]=16;
       monsters[6].speed=12;
       monsters[6].monname=23;
       monsters[6].monexp=20;
       monsters[6].lvl=3;
       monsters[6].index[0]=3; //potion
       monsters[6].index[1]=26; //hay
       monsters[6].index[2]=-1; //nothing
       monsters[6].view=13;
       
       monsters[7].hp=305;  //turtle
       monsters[7].str=50;
       monsters[7].def=30;
       monsters[7].chidef=20;
       monsters[7].randact[1]=1;  //misses
       monsters[7].randact[2]=1; 
       monsters[7].spirit[1]=15;
       monsters[7].speed=8;
       monsters[7].monname=37; //Chikara Elemental
       monsters[7].monexp=35;
       monsters[7].lvl=2;
       monsters[7].index[0]=27; //potion
       monsters[7].index[1]=3; //potion
       monsters[7].index[2]=7; //potion
       monsters[7].view=54;
       
       monsters[8].hp=275;  //sub
       monsters[8].str=60;
       monsters[8].def=30;
       monsters[8].chidef=20;
       monsters[8].randact[1]=1;  //misses
       monsters[8].randact[2]=1; 
       monsters[8].spirit[1]=15;
       monsters[8].speed=3;
       monsters[8].monname=35; //Tsuki Elemental
       monsters[8].monexp=38;
       monsters[8].lvl=2;
       monsters[8].index[0]=7; //potion
       monsters[8].index[1]=3; //potion
       monsters[8].index[2]=3; //potion
       monsters[8].view=53;
       
       monsters[9].hp=150; //eye
       monsters[9].str=50;
       monsters[9].def=20;
       monsters[9].chidef=20;
       monsters[9].randact[1]=1;  //misses
       monsters[9].randact[2]=1;  //misses
       monsters[9].spirit[1]=15;
       monsters[9].speed=5;
       monsters[9].monname=24; //eye
       monsters[9].monexp=30;
       monsters[9].lvl=4;
       monsters[9].index[0]=27; //nothing
       monsters[9].index[1]=-1; //noting
       monsters[9].index[2]=7; //elixir
       monsters[9].view=16;
       
       monsters[10].hp=200; //whale
       monsters[10].str=50;
       monsters[10].def=20;
       monsters[10].chidef=35;
       monsters[10].randact[1]=1;  //misses
       monsters[10].randact[2]=1;  //misses
       monsters[10].spirit[1]=15;
       monsters[10].speed=12;
       monsters[10].monname=40;
       monsters[10].monexp=20;
       monsters[10].lvl=3;
       monsters[10].index[0]=3; //potion
       monsters[10].index[1]=26; //hay
       monsters[10].index[2]=-1; //nothing
       monsters[10].view=57;
       
       monsters[11].hp=500; //bird
       monsters[11].str=60;
       monsters[11].def=40;
       monsters[11].chidef=60;
       monsters[11].randact[1]=1;  //misses
       monsters[11].randact[2]=1;  //misses
       monsters[11].spirit[1]=15;
       monsters[11].speed=15;
       monsters[11].monname=25; //eye
       monsters[11].monexp=60;
       monsters[11].lvl=6;
       monsters[11].index[0]=3; //potion
       monsters[11].index[1]=3; //potion
       monsters[11].index[2]=7; //elixir
       monsters[11].view=45;
       
       monsters[12].hp=650; //snake
       monsters[12].str=40;
       monsters[12].def=50;
       monsters[12].chidef=50;
       monsters[12].randact[1]=1;  //misses
       monsters[12].randact[2]=1; 
       monsters[12].spirit[1]=15;
       monsters[12].speed=8;
       monsters[12].monname=26; //thief
       monsters[12].monexp=60;
       monsters[12].lvl=6; 
       monsters[12].index[0]=3; //potion
       monsters[12].index[1]=7; //potion
       monsters[12].index[2]=27; //potion
       monsters[12].view=46;
       
       monsters[13].hp=1000;//wolf
       monsters[13].str=100;
       monsters[13].def=50;
       monsters[13].chidef=50;
       monsters[13].randact[1]=1;  //misses
       monsters[13].randact[2]=1; 
       monsters[13].spirit[1]=15;
       monsters[13].speed=20;
       monsters[13].monname=27; //Himitsu Spirit
       monsters[13].monexp=80;
       monsters[13].lvl=7;
       monsters[13].index[0]=3; //potion
       monsters[13].index[1]=26; //hay
       monsters[13].index[2]=9; //hay
       monsters[13].view=47;
       
       monsters[14].hp=2000; //ghost
       monsters[14].str=78;
       monsters[14].def=40;
       monsters[14].chidef=35;
       monsters[14].randact[1]=1;  //misses
       monsters[14].randact[2]=1;  //misses
       monsters[14].spirit[1]=15;
       monsters[14].speed=12;
       monsters[14].monname=41;
       monsters[14].monexp=20;
       monsters[14].lvl=8;
       monsters[14].index[0]=3; //potion
       monsters[14].index[1]=26; //hay
       monsters[14].index[2]=27; //elx
       monsters[14].view=58;
      
       monsters[15].hp=1750;//tree
       monsters[15].str=80;
       monsters[15].def=100;
       monsters[15].chidef=50;
       monsters[15].randact[1]=1;  //misses
       monsters[15].randact[2]=1; 
       monsters[15].spirit[1]=15;
       monsters[15].speed=1;
       monsters[15].monname=28; //Higher Spirit
       monsters[15].monexp=95;
       monsters[15].lvl=7;
       monsters[15].index[0]=3; //potion
       monsters[15].index[1]=27; //
       monsters[15].index[2]=8; //
       monsters[15].view=48;
       
       monsters[16].hp=2000;//eagle
       monsters[16].str=100;
       monsters[16].def=60;
       monsters[16].chidef=125;
       monsters[16].randact[1]=1;  //misses
       monsters[16].randact[2]=1; 
       monsters[16].spirit[1]=15;
       monsters[16].speed=25;
       monsters[16].monname=29; //Higher Spirit
       monsters[16].monexp=120;
       monsters[16].lvl=10;
       monsters[16].index[0]=3; //potion
       monsters[16].index[1]=27; //elx
       monsters[16].index[2]=27; //elx
       monsters[16].view=49;
      
       monsters[17].hp=150; //mission snake
       monsters[17].str=40;
       monsters[17].def=10;
       monsters[17].chidef=50;
       monsters[17].randact[1]=1;  //misses
       monsters[17].randact[2]=1; 
       monsters[17].spirit[1]=15;
       monsters[17].speed=8;
       monsters[17].monname=37; //thief
       monsters[17].monexp=60;
       monsters[17].lvl=4; 
       monsters[17].index[0]=3; //potion
       monsters[17].index[1]=7; //potion
       monsters[17].index[2]=27; //potion
       monsters[17].view=46;
       
       monsters[18].hp=250; //Baron Sol
       monsters[18].str=80;
       monsters[18].def=30;
       monsters[18].chidef=50;
       monsters[18].randact[1]=1;  //misses
       monsters[18].randact[2]=1; 
       monsters[18].spirit[1]=15;
       monsters[18].speed=8;
       monsters[18].monname=42; //thief
       monsters[18].monexp=160;
       monsters[18].lvl=4; 
       monsters[18].index[0]=3; //potion
       monsters[18].index[1]=7; //potion
       monsters[18].index[2]=27; //potion
       monsters[18].view=59;
       
       monsterset[1].max=1;
       monsterset[1].index[1]=1;
       
       monsterset[2].max=1;
       monsterset[2].index[1]=1;
       
       monsterset[3].max=2;
       monsterset[3].index[1]=1;
       monsterset[3].index[2]=1;
       
       monsterset[4].max=2;
       monsterset[4].index[1]=1;
       monsterset[4].index[2]=1;
       
       monsterset[5].max=2;
       monsterset[5].index[1]=1;
       monsterset[5].index[2]=0;
       
       monsterset[6].max=3;
       monsterset[6].index[1]=1;
       monsterset[6].index[2]=0;
       monsterset[6].index[3]=0;
       
       monsterset[7].max=3;
       monsterset[7].index[1]=1;
       monsterset[7].index[2]=1;
       monsterset[7].index[3]=1;
       
       monsterset[8].max=1;
       monsterset[8].index[1]=0;
       
       monsterset[9].max=1;
       monsterset[9].index[1]=1;
       
       monsterset[10].max=2;
       monsterset[10].index[1]=0;
       monsterset[10].index[2]=0;
       
       monsterset[11].max=2;
       monsterset[11].index[1]=1;
       monsterset[11].index[2]=1;
       
       monsterset[12].max=2;
       monsterset[12].index[1]=1;
       monsterset[12].index[2]=0;
       
       monsterset[13].max=3;
       monsterset[13].index[1]=1;
       monsterset[13].index[2]=0;
       monsterset[13].index[3]=0;
       
       monsterset[14].max=3;
       monsterset[14].index[1]=1;
       monsterset[14].index[2]=1;
       monsterset[14].index[3]=1;
       
       monsterset[15].max=1;
       monsterset[15].index[1]=0;
       
       monsterset[16].max=1;
       monsterset[16].index[1]=1;
       
       monsterset[17].max=2;
       monsterset[17].index[1]=0;
       monsterset[17].index[2]=0;
       
       monsterset[18].max=2;
       monsterset[18].index[1]=1;
       monsterset[18].index[2]=1;
       
       monsterset[19].max=2;
       monsterset[19].index[1]=1;
       monsterset[19].index[2]=0;
       
       monsterset[20].max=3;
       monsterset[20].index[1]=1;
       monsterset[20].index[2]=0;
       monsterset[20].index[3]=0;
       
       monsterset[21].max=3;
       monsterset[21].index[1]=1;
       monsterset[21].index[2]=1;
       monsterset[21].index[3]=1;
       
       monsterset[22].max=1;
       monsterset[22].index[1]=0;
       
       monsterset[23].max=1;
       monsterset[23].index[1]=1;
       
       monsterset[24].max=2;
       monsterset[24].index[1]=0;
       monsterset[24].index[2]=0;
       
       monsterset[25].max=2;
       monsterset[25].index[1]=1;
       monsterset[25].index[2]=1;
       
       monsterset[26].max=2;
       monsterset[26].index[1]=1;
       monsterset[26].index[2]=0;
       
       monsterset[27].max=3;
       monsterset[27].index[1]=1;
       monsterset[27].index[2]=0;
       monsterset[27].index[3]=0;
       
       monsterset[28].max=3;
       monsterset[28].index[1]=1;
       monsterset[28].index[2]=1;
       monsterset[28].index[3]=1;
       
       monsterset[29].max=1;
       monsterset[29].index[1]=0;
       
       monsterset[30].max=1;
       monsterset[30].index[1]=1;
       
       monsterset[31].max=2;
       monsterset[31].index[1]=0;
       monsterset[31].index[2]=0;
       
       monsterset[32].max=2;
       monsterset[32].index[1]=1;
       monsterset[32].index[2]=1;
       
       monsterset[33].max=2;
       monsterset[33].index[1]=1;
       monsterset[33].index[2]=0;
       
       monsterset[34].max=3;
       monsterset[34].index[1]=1;
       monsterset[34].index[2]=0;
       monsterset[34].index[3]=0;
       
       monsterset[35].max=3;
       monsterset[35].index[1]=1;
       monsterset[35].index[2]=1;
       monsterset[35].index[3]=1;
       
       
              //Constant
       MissionType[0]="Caving";
       MissionType[1]="Gathering";
       MissionType[2]="Hunt";
       MissionType[3]="Delivery";
       MissionType[4]="Escort";
       MissionType[5]="Fetch";
      
       mission[1].index=0;			//not started
       mission[1].money=200;
       mission[1].type=0;
       mission[1].item=0;
       mission[1].days=5;
       mission[1].dial=0;
       
       mission[2].index=0;			//not started
       mission[2].type=2;
       mission[2].money=200;
       mission[2].item=7;
       mission[2].days=0;
       mission[2].dial=24;
       mission[2].name="Deep in the woods";
       
       mission[3].index=0;			//not started
       mission[3].type=0;
       mission[3].money=200;
       mission[3].item=7;
       mission[3].days=0;
       mission[3].dial=55;
       mission[3].name="Library Treasure Hunt";
       
       mission[10].index=0;			//not started
       mission[10].type=3;      //caravan
       mission[10].money=200;
       mission[10].item=0;
       mission[10].days=0;
       mission[10].dial=26;
       mission[10].name="Trading Trouble";
       
       
       mission[11].index=0;			//not started
       mission[11].type=2;      //caravan
       mission[11].money=200;
       mission[11].item=0;
       mission[11].days=0;
       mission[11].dial=26;
       mission[11].name="11 Trouble";
       
       mission[12].index=0;			//not started
       mission[12].type=2;      //caravan
       mission[12].money=200;
       mission[12].item=0;
       mission[12].days=0;
       mission[12].dial=26;
       mission[12].name="12 Trouble";
       
       mission[13].index=0;			//not started
       mission[13].type=2;      //caravan
       mission[13].money=200;
       mission[13].item=0;
       mission[13].days=0;
       mission[13].dial=26;
       mission[13].name="Trading Trouble";
       
       mission[14].index=0;			//not started
       mission[14].type=2;      //caravan
       mission[14].money=200;
       mission[14].item=0;
       mission[14].days=0;
       mission[14].dial=26;
       mission[14].name="14 Trouble";
       
       mission[15].index=0;			//not started
       mission[15].type=2;      //caravan
       mission[15].money=200;
       mission[15].item=0;
       mission[15].days=0;
       mission[15].dial=26;
       mission[15].name="15 Trouble";
       
       mission[16].index=0;			//not started
       mission[16].type=2;      //caravan
       mission[16].money=200;
       mission[16].item=0;
       mission[16].days=0;
       mission[16].dial=26;
       mission[16].name="16 Trouble";
       
       mission[17].index=0;			//not started
       mission[17].type=2;      //caravan
       mission[17].money=200;
       mission[17].item=0;
       mission[17].days=0;
       mission[17].dial=26;
       mission[17].name="17 Trouble";
       
       mission[18].index=0;			//not started
       mission[18].type=2;      //caravan
       mission[18].money=200;
       mission[18].item=0;
       mission[18].days=0;
       mission[18].dial=26;
       mission[18].name="18 Trouble";
       
       mission[19].index=0;			//not started
       mission[19].type=2;      //caravan
       mission[19].money=200;
       mission[19].item=0;
       mission[19].days=0;
       mission[19].dial=26;
       mission[19].name="19 Trouble";
       
       lsMission.AddItem(mission[2].name);
       lsType.AddItem(MissionType[mission[2].type]);
       lsMission.AddItem(mission[3].name);
       lsType.AddItem(MissionType[mission[3].type]);
       lsMission.AddItem(mission[10].name);
       lsType.AddItem(MissionType[mission[10].type]);
              lsMission.AddItem(mission[11].name);
       lsType.AddItem(MissionType[mission[11].type]);
              lsMission.AddItem(mission[12].name);
       lsType.AddItem(MissionType[mission[12].type]);
              lsMission.AddItem(mission[13].name);
       lsType.AddItem(MissionType[mission[13].type]);
              lsMission.AddItem(mission[14].name);
       lsType.AddItem(MissionType[mission[14].type]);
              lsMission.AddItem(mission[15].name);
       lsType.AddItem(MissionType[mission[15].type]);
              lsMission.AddItem(mission[16].name);
       lsType.AddItem(MissionType[mission[16].type]);
              lsMission.AddItem(mission[17].name);
       lsType.AddItem(MissionType[mission[17].type]);
              lsMission.AddItem(mission[18].name);
       lsType.AddItem(MissionType[mission[18].type]);
      
       missionListLink[0]=2;
       missionListLink[1]=3;
       missionListLink[2]=10;
       missionListLink[3]=11;
       missionListLink[4]=12;
       missionListLink[5]=13;
       missionListLink[6]=14;
       missionListLink[7]=15;
       missionListLink[8]=16;
       missionListLink[9]=17;
       missionListLink[10]=18;
       
       CurrentMissionIndex=18;
       
       trade[0].water=5; //average
       trade[0].fruit=10;
       trade[0].meat=30;
       trade[0].wood=45;
       trade[0].textile=80;
       trade[0].metal=100;
       
       trade[1].water=15; // larche
       trade[1].fruit=5;
       trade[1].meat=50;
       trade[1].wood=30;
       trade[1].textile=80;
       trade[1].metal=85;
       trade[1].watermod=15; // larche
       trade[1].fruitmod=5;
       trade[1].meatmod=50;
       trade[1].woodmod=30;
       trade[1].textilemod=80;
       trade[1].metalmod=85;
       
       trade[2].water=3; // drasken
       trade[2].fruit=10;
       trade[2].meat=40;
       trade[2].wood=45;
       trade[2].textile=100;
       trade[2].metal=100;
       trade[2].watermod=3; // drasken
       trade[2].fruitmod=10;
       trade[2].meatmod=40;
       trade[2].woodmod=45;
       trade[2].textilemod=100;
       trade[2].metalmod=100;
       
       trade[3].water=5; // Nasir
       trade[3].fruit=7;
       trade[3].meat=10;
       trade[3].wood=60;
       trade[3].textile=80;
       trade[3].metal=120;
       trade[3].watermod=5; // Nasir
       trade[3].fruitmod=7;
       trade[3].meatmod=10;
       trade[3].woodmod=60;
       trade[3].textilemod=80;
       trade[3].metalmod=120;
       
       trade[4].water=7; // Mikram
       trade[4].fruit=15;
       trade[4].meat=30;
       trade[4].wood=45;
       trade[4].textile=65;
       trade[4].metal=100;
       trade[4].watermod=7; // Mikram
       trade[4].fruitmod=15;
       trade[4].meatmod=30;
       trade[4].woodmod=45;
       trade[4].textilemod=65;
       trade[4].metalmod=100;
       
       trade[5].water=5; // Kotyo
       trade[5].fruit=10;
       trade[5].meat=30;
       trade[5].wood=10;
       trade[5].textile=70;
       trade[5].metal=90;
       trade[5].watermod=5; // larche
       trade[5].fruitmod=10;
       trade[5].meatmod=30;
       trade[5].woodmod=10;
       trade[5].textilemod=70;
       trade[5].metalmod=90;
       
       trade[6].water=5; // Lerbin
       trade[6].fruit=10;
       trade[6].meat=30;
       trade[6].wood=50;
       trade[6].textile=90;
       trade[6].metal=135;
       trade[6].watermod=5; // larche
       trade[6].fruitmod=10;
       trade[6].meatmod=30;
       trade[6].woodmod=50;
       trade[6].textilemod=90;
       trade[6].metalmod=135;
       
       trade[20].water=1; // your stash
       trade[20].fruit=0;
       trade[20].meat=0;
       trade[20].wood=0;
       trade[20].textile=3;
       trade[20].metal=1;
       
       cave[0].tile[1]=14; //v>
       cave[0].tile[2]=6;  //<>
       cave[0].tile[3]=7;  //<v
       cave[0].tile[4]=0;
       cave[0].tile[5]=0;
       cave[0].tile[6]=0;
       /////////////////
       cave[0].tile[7]=14; //AV>
       cave[0].tile[8]=6; //<>
       cave[0].tile[9]=5; //A<
       cave[0].tile[10]=0;
       cave[0].tile[11]=0;
       cave[0].tile[12]=0;
       /////////////////
       cave[0].tile[13]=2; //A
       cave[0].tile[14]=0;
       cave[0].tile[15]=0;
       cave[0].tile[16]=0;
       cave[0].tile[17]=0;
       cave[0].tile[18]=0;
       cave[0].gate[1]=1;
       cave[0].gate[2]=2;
       cave[0].gate[3]=2;
       cave[0].gate[4]=1;
       cave[0].gate[5]=7; //shouild be 7
       cave[0].gate[6]=1;
       cave[0].gate[7]=8; //should be 8
       cave[0].gate[8]=1;
       cave[0].gate[9]=0;
       cave[0].gate[10]=0;
       cave[0].key[1]=2;   //should be 2
       cave[0].key[2]=3;
       cave[0].key[3]=9;
       cave[0].key[4]=0;
       cave[0].key[5]=0;
       cave[0].treasure[1]=8;
       cave[0].treasure[2]=0;
       cave[0].treasure[3]=0;
       cave[0].treasure[4]=0;
       cave[0].treasure[5]=0;
       
  //**************************************************************************************
  //****				GLOBAL INTS SETUP			      ****
  //**************************************************************************************

	SetGlobalInt(0,  0);  //sucess in battle
	SetGlobalInt(1,  0);  //partner's success in battle

	SetGlobalInt(2, 0); //which town trade 

	SetGlobalInt(3,  0);  //spellbook for chakra powers
	
	SetGlobalInt(4,   500); //money
	SetGlobalInt(5,   0); //amount of stuff to buy
	SetGlobalInt(6,   0); //which inv item to buy
	
	SetGlobalInt(7,   0); //full chi
	SetGlobalInt(8,   0); //current chi
	
	SetGlobalInt(9,  3);  //max number of enemies on screen (minimum 2)
	SetGlobalInt(10, 0); 	//monster_ID
	SetGlobalInt(11, 0);  //monster turn
	SetGlobalInt(12, 0);  //monster type
	SetGlobalInt(13, 0);  //is monster dead?
	
	SetGlobalInt(15,  -1); //is anyone protecting the rest of the team in battle?

	SetGlobalInt(16, 0); //was the monster on the map or a random encounter?
	
	SetGlobalInt(17, 0);  //is there a caravan?
	SetGlobalInt(18, 200); //caravan health
	SetGlobalInt(19, 20); //size of caravan
	
  SetGlobalInt(20,  1);  //current mission ID
	SetGlobalInt(21,  0);  //mission status : 0>not started, 1 to 9 >missions flags, 10>completed
	SetGlobalInt(22,  0);  //number of days for mission
	SetGlobalInt(23,  0);  //starting raw day
	
	SetGlobalInt(24,  0);  //current hard mission ID
	SetGlobalInt(25,  0);  //mission status : 0>not started, 1 to 9 >missions flags, 10>completed
	SetGlobalInt(26,  0);  //number of days for mission
	SetGlobalInt(27,  0);  //starting raw day
	
	SetGlobalInt(30,  0);  //do you have the chalice? >>>>RESET BACK TO ZERO LATER
	SetGlobalInt(31,  0);  //how many monsters absorbed?
	SetGlobalInt(32,  0);  //adding whats in chalice
	
	SetGlobalInt(33, 1); //0 buying items, 1 selling items.
	
	SetGlobalInt(40,  0);  //is earth power on?
	SetGlobalInt(41,  1);  //is water power on?
  SetGlobalInt(42,  0);  //is fire power on?
  SetGlobalInt(43,  0);  //is air power on?    
	
	SetGlobalInt(49, 1);   //which region char is in.
  //SetGlobalInt(50, 393);  //required char's x location
	//SetGlobalInt(51, 82);   //required char's y pos.
	
   SetGlobalInt(50, 816);  //required char's x location
	SetGlobalInt(51, 111);   //required char's y pos.
  
	SetGlobalInt(52, 1);    //current partner
	
	SetGlobalInt(53, 0);    //character flag in inventory
	SetGlobalInt(54, 1);    //max party members
	
	SetGlobalInt(60, 0);    //temp number for varying uses between functions
	SetGlobalInt(61, 0);    //sets guild on in Larche
	SetGlobalInt(62, 0);		//sets shrine on in Drasken
	
	SetGlobalInt(150, 0);   //set town button 1
	SetGlobalInt(151, 0);   //set town button 2
	SetGlobalInt(152, 0);   //set town button 3
	SetGlobalInt(153, 0);   //set town button 4
	
	SetGlobalInt(190, 0);   //set cave number
	
	SetGlobalInt(198, 0);   //town gui flag
	SetGlobalInt(199, 0);   //story flag
	
  SetGlobalInt(200, 1);   //day
	SetGlobalInt(201, 1);   //month
	SetGlobalInt(202, 1);   //year
	SetGlobalInt(203, 20);  //waiting time in SLOW TEXT MODE	
	SetGlobalInt(204, 1);   //raw day number  
	
	
  //**************************************************************************************
  //****				GLOBAL STRING SETUP			      ****
  //**************************************************************************************
  
	SetGlobalString(0, "V0.50");  //version number
	SetGlobalString(1, "Duvall");
	SetGlobalString(2, "Senshi");
	SetGlobalString(3, "Earth");
	SetGlobalString(4, "Water");
	SetGlobalString(5, "Fire");
	SetGlobalString(6, "Air");
	SetGlobalString(8,"Rock blast");     //chakra power 1 name
	SetGlobalString(9,"Water blast");
	SetGlobalString(10,"Fire blast");
	SetGlobalString(11,"Wind blast");
	SetGlobalString(12,"Ruah Cure");
	SetGlobalString(13,"Earthquake");     //earth power2
  SetGlobalString(14,"Flood");         //water power2
  SetGlobalString(15,"Lava Flow");       //fire power2
  SetGlobalString(16,"Tornado");         //air power2
  SetGlobalString(17,"Meteorite");     //earth power3
	SetGlobalString(18,"Tsunami wave");  //water power3
	SetGlobalString(19,"Atomic explosion");//fire power3
	
	SetGlobalString(20, "Octo Kai Butsu");  //octopus monster
	SetGlobalString(21, "Eye Gan Spirit");      //eye spirit
	SetGlobalString(22, "Rock Kai Tou");       //phantom thief
	SetGlobalString(23, "Octo Himitsu Spirit");
	SetGlobalString(24, "Eye Higher Spirit");
	SetGlobalString(25, "Winged Elemental");
	SetGlobalString(26, "Yume Ryuu");
	SetGlobalString(27, "Chikara Elemental");
	SetGlobalString(28, "Higher Elemental");
	SetGlobalString(29, "Tsuki Spirit");
	
	SetGlobalString(30, "Space rush"); //air power3
	SetGlobalString(31, "Kundalini"); //max force
	SetGlobalString(32, "high cure");
	SetGlobalString(33, "max cure");
	SetGlobalString(34, "Kunda Heal");
	
	SetGlobalString(35, "Sub Elemental");
	SetGlobalString(36, "Insect Spirit");
	SetGlobalString(37, "Wounded Yume Ryuu");
	SetGlobalString(38, "Rabbit Kai Tou");
	SetGlobalString(39, "Mushroom Elemental");
	SetGlobalString(40, "Whale Kai Butsu");
	SetGlobalString(41, "Ghost Spirit");
	SetGlobalString(42, "Baron Sol");
	
	
}
#sectionend game_start  // DO NOT EDIT OR REMOVE THIS LINE


#sectionstart repeatedly_execute  // DO NOT EDIT OR REMOVE THIS LINE
function repeatedly_execute() {
  // put anything you want to happen every game cycle here

if (IsGUIOn(2)==1)
{
  string buffer;
	string buffer2;
	string buffer3;
	GUIControl *theControl = GUIControl.GetAtScreenXY(mouse.x, mouse.y);
	if (theControl == weaponbutton) {
	GetInvName(swords[partner[GetGlobalInt(53)].weaponID].index,buffer2);
	GetInvPropertyText(swords[partner[GetGlobalInt(53)].weaponID].index,"description",buffer);
	SetLabelText(2, 25, buffer2);
	SetLabelText(2, 26, buffer);
	}
	else if (theControl == shieldbutton) {
	GetInvName(shields[partner[GetGlobalInt(53)].shieldID].index,buffer2);
	GetInvPropertyText(shields[partner[GetGlobalInt(53)].shieldID].index,"description",buffer);
	SetLabelText(2, 25, buffer2);
	SetLabelText(2, 26, buffer);
	}
	else if (theControl == ringbutton) {
	GetInvName(rings[partner[GetGlobalInt(53)].ringID].index,buffer2);
	GetInvPropertyText(rings[partner[GetGlobalInt(53)].ringID].index,"description",buffer);
	SetLabelText(2, 25, buffer2);
	SetLabelText(2, 26, buffer);
	}
	else 
	{
	  SetLabelText(2, 25, "");
	  SetLabelText(2, 26, "");
}
}
if (IsGUIOn(6)==1)
{
  GUIControl *theControl = GUIControl.GetAtScreenXY(mouse.x, mouse.y);
	if (theControl == attk) {
  SetLabelText (6, 4,  "Attack");
  SetLabelText (6, 7,  "");
  }
  else if (theControl == abs)
  {
  SetLabelText (6, 4,  "Absorb");
  SetLabelText (6, 7,  "");
	}
   else if (theControl == defend)
   {
  SetLabelText (6, 4,  "Defend");
  SetLabelText (6, 7,  "");
	}
   else if (theControl == focus)
  {
  SetLabelText (6, 4,  "Focus");
  SetLabelText (6, 7,  "");
	}
  else if (theControl == chakrabt)
  {
  if (partner[GetGlobalInt(11)].chakratype!=0)
	{
  GetGlobalString(chakra[partner[GetGlobalInt(11)].chakratype].chakraname ,allbuffer1);
  StrCat(allbuffer1, " chakra");
  SetLabelText (6, 4,  allbuffer1);
  SetLabelText (6, 7,  "");
  }
  else
  {
  SetLabelText (6, 4,  "No Chakra");
  SetLabelText (6, 7,  "");
  }
  }
  else if (theControl == itembox)
  SetLabelText (6, 4,  "Items");
  else
  {
  SetLabelText (6, 4,  "");
  SetLabelText (6, 7,  "");
  }
}

if (IsGUIOn(12)==1)
{  
	string buffer;
	string buffer2;
	string buffer3;
	int temp=GetInvAt (mouse.x, mouse.y);
	if (temp>0)
	{
	GetInvName(temp,buffer); 
	int tempamount=character[2].inv[temp];
	StrFormat(buffer3, " x%d", tempamount);
	StrCat(buffer, buffer3);
	GetInvPropertyText(temp,"description",buffer2);
	}
	else 
        {
        StrCopy(buffer,"Items");
	StrCopy(buffer2," ");
	}
	SetLabelText (12, 4, buffer);   
	SetLabelText (12, 5, buffer2);

}

if (IsGUIOn(13)==1)
{  
	string buffer;
	string buffer2;
	string buffer3;
	int temp=GetInvAt (mouse.x, mouse.y);
	if (temp>0)
	{
	GetInvName(temp,buffer); 
	int tempamount=character[partner[GetGlobalInt(53)].view].inv[temp];
	StrFormat(buffer3, " x%d", tempamount);
	StrCat(buffer, buffer3);
	GetInvPropertyText(temp,"description",buffer2);
	}
	else 
        {
        StrCopy(buffer,"Weapons");
	StrCopy(buffer2," ");
	}
	SetLabelText (13, 4, buffer);   
	SetLabelText (13, 5, buffer2);

}

if (IsGUIOn(14)==1)
{  
	string buffer;
	string buffer2;
	string buffer3;
	int temp=GetInvAt (mouse.x, mouse.y);
	if (temp>0)
	{
	GetInvName(temp,buffer); 
	int tempamount=character[3].inv[temp];
	StrFormat(buffer3, " x%d", tempamount);
	StrCat(buffer, buffer3);
	GetInvPropertyText(temp,"description",buffer2);
	}
	else 
  {
  StrCopy(buffer,"Accessories");
	StrCopy(buffer2," ");
	}
	SetLabelText (14, 4, buffer);   
	SetLabelText (14, 5, buffer2);

}

if (IsGUIOn(15)==1)
{  
	string buffer;
	string buffer2;
	string buffer3;
	int temp=GetInvAt (mouse.x, mouse.y);
	if (temp>0)
	{
	GetInvName(temp,buffer); 
	int tempamount=character[4].inv[temp];
	StrFormat(buffer3, " x%d", tempamount);
	StrCat(buffer, buffer3);
	GetInvPropertyText(temp,"description",buffer2);
	}
	else 
  {
  StrCopy(buffer,"Shields");
	StrCopy(buffer2," ");
	}
	SetLabelText (15, 4, buffer);   
	SetLabelText (15, 5, buffer2);

}

if (IsGUIOn(19)==1)
{
  tempchar=GetCharacterAt(mouse.x,mouse.y); 

if (tempchar!=-1)
{
  StrCopy(allbuffer1, "talk to ");
  GetCharacterPropertyText(tempchar, "description", allbuffer2);
  StrCat(allbuffer1, allbuffer2);
  SetLabelText(19, 0, allbuffer1);
  AnimateCharacter(tempchar, 1, 0, 0);
  clearchar=tempchar;
}
else
{
  if (clearchar!=-1)
  {
    AnimateCharacter(clearchar, 0, 0, 0);
    clearchar=-1;
    SetLabelText(19, 0, "");
   }
}
}

if ((mouse.Mode==eModePower) || (mouse.Mode==eModeChakra))
{
  int tempcounter=GetCharacterAt(mouse.x, mouse.y);
  if (tempcounter!=-1)
  {
    
    tempchar=GetCharacterProperty(tempcounter, "strength");
    String tempstring;
    tempstring = String.Format("%d",tempcounter);
    //GetGlobalString(partner[tempchar].name, tempstring);

    SetLabelText(6, 4, tempstring);
    if (mouse.IsButtonDown(eMouseLeft)==true)
      ProcessClick(mouse.x, mouse.y, GetCursorMode() );

  }
  else 
    SetLabelText (6, 4,  "Select Monster");
}

if (mouse.Mode==eModeInteract)
{
  int tempcounter=GetCharacterAt(mouse.x, mouse.y);
  if (tempcounter!=-1)
  {
    tempchar=GetCharacterProperty(tempcounter, "strength");
    string tempstring;
    GetGlobalString(partner[tempchar].name, tempstring);
    SetLabelText(6, 4, tempstring);
  }
  else 
    SetLabelText (6, 4,  "");
}
 

if (IsGUIOn(20)==1)
{  
	string buffer;
	string buffer2;
	string buffer3;
	string amountbuffer;
	string amountbuffer2;
	string pricebuffer;
	string pricemain;
	string moneymain;
	int amountcost;
	int temp=GetInvAt (mouse.x, mouse.y);
	int temp2=GetGUIObjectAt(mouse.x, mouse.y);
	
	StrFormat(moneybuffer, "%d", GetGlobalInt(4));
	StrCopy(moneymain, "Money: ");
	StrCat(moneymain, moneybuffer);
  SetLabelText(20, 8, moneymain);
  
  if (GetGlobalInt(6)>0)
  {
  amountcost=GetGlobalInt(5)*GetInvProperty(GetGlobalInt(6), "value");
  StrFormat(amountbuffer, "amount %d", GetGlobalInt(5)); 
  StrFormat(amountbuffer2, " / cost %d", amountcost);
  StrCat(amountbuffer, amountbuffer2);
  SetLabelText(20,5, amountbuffer);
  GetInvName(GetGlobalInt(6), buffer3);
  SetLabelText(20, 13, buffer3); 
  }
  else 
  {
  SetLabelText(20,5, "Amount 0 / Cost 0");
  SetLabelText(20, 13, " "); 
  }
  
	if (temp>0) //mouse pointing at something
	{
	StrCopy(pricemain, "Cost: ");
	StrFormat(pricebuffer, "%d", GetInvProperty(temp, "value"));
	StrCat(pricemain, pricebuffer);
	GetInvName(temp,buffer); 
	GetInvPropertyText(temp,"description",buffer2);
	}
	else 
  {
     if (temp2==9) StrCopy(buffer, "Items");
				else if (temp2==10) StrCopy(buffer, "Weapons");
				else if (temp2==11) StrCopy(buffer, "Shields");
				else if (temp2==12) StrCopy(buffer, "Accessories");
				else StrCopy(buffer," ");
	StrCopy(buffer2," ");
	StrCopy(pricemain, " ");
	}
	SetLabelText (20, 3, buffer);   
	SetLabelText (20, 4, buffer2);
	SetLabelText (20, 14, pricemain);

} 


if (IsGUIOn(22)==1)
{
  int tempcount;
  string templabel2;
  GUIControl *theControl = GUIControl.GetAtScreenXY(mouse.x, mouse.y);
  tempcount=swords[partner[GetGlobalInt(11)].weaponID].chi;
  if (theControl == attklow)
   {
  SetLabelText (6, 4,  "Weak attack");
  SetLabelText (6, 7,  "Cost 0");
	}
	else if (theControl == attkmed)
   {
  SetLabelText (6, 4,  "Medium attack");
  StrFormat(templabel2, "Cost %d",tempcount );
  SetLabelText (6, 7,  templabel2);
	}
	else if (theControl == attkhigh)
   {
  SetLabelText (6, 4,  "Strong attack");
  StrFormat(templabel2, "Cost %d",tempcount+(tempcount/2) );
  SetLabelText (6, 7,  templabel2);
	}
	else
  {
  SetLabelText (6, 4,  "");
  SetLabelText (6, 7,  "");
  }
}

if (IsGUIOn(23)==1)
{
  GUIControl *theControl = GUIControl.GetAtScreenXY(mouse.x, mouse.y);
  if (theControl == chka)
   {
     string templabel;
     string templabel2;
     int    tempcount;
     
     GetGlobalString(powers[chakra[partner[GetGlobalInt(11)].chakratype].power[1]].powername, templabel);
     tempcount=powers[chakra[partner[GetGlobalInt(11)].chakratype].power[1]].cost;
     StrFormat(templabel2, "Cost %d",tempcount );
     
  SetLabelText (6, 4,  templabel);
  SetLabelText (6, 7,  templabel2);
	}
	else if (theControl == chkb && powers[chakra[partner[GetGlobalInt(11)].chakratype].power[2]].on==1)
   {
     string templabel;
     string templabel2;
     int    tempcount;
     
     GetGlobalString(powers[chakra[partner[GetGlobalInt(11)].chakratype].power[2]].powername, templabel);
     tempcount=powers[chakra[partner[GetGlobalInt(11)].chakratype].power[2]].cost;
     StrFormat(templabel2, "Cost %d",tempcount );
     
  SetLabelText (6, 4,  templabel);
  SetLabelText (6, 7,  templabel2);
	}
	else if (theControl == chkc && powers[chakra[partner[GetGlobalInt(11)].chakratype].power[3]].on==1)
   {
     string templabel;
     string templabel2;
     int    tempcount;
     
     GetGlobalString(powers[chakra[partner[GetGlobalInt(11)].chakratype].power[3]].powername, templabel);
     tempcount=powers[chakra[partner[GetGlobalInt(11)].chakratype].power[3]].cost;
     StrFormat(templabel2, "Cost %d",tempcount );
     
  SetLabelText (6, 4,  templabel);
  SetLabelText (6, 7,  templabel2);
	}
	else if (theControl == chkd && powers[chakra[partner[GetGlobalInt(11)].chakratype].power[4]].on==1)
   {
     string templabel;
     string templabel2;
     int    tempcount;
     
     GetGlobalString(powers[chakra[partner[GetGlobalInt(11)].chakratype].power[4]].powername, templabel);
     tempcount=powers[chakra[partner[GetGlobalInt(11)].chakratype].power[4]].cost;
     StrFormat(templabel2, "Cost %d",tempcount );
     
  SetLabelText (6, 4,  templabel);
  SetLabelText (6, 7,  templabel2);
	}
	else
  {
  SetLabelText (6, 4,  "");
  SetLabelText (6, 7,  "");
  }
}

if (IsGUIOn(24)==1)
{
  GUIControl *theControl = GUIControl.GetAtScreenXY(mouse.x, mouse.y);
  if (theControl == defendself)
   {
  SetLabelText (6, 4,  "Defend self");
  SetLabelText (6, 7,  "Cost 3");
	}
	else if (theControl == protect)
 {
  SetLabelText (6, 4,  "Protect partner");
  SetLabelText (6, 7,  "Cost 5");
	}
	else
  {
  SetLabelText (6, 4,  "");
  SetLabelText (6, 7,  "");
  }
}

if (IsGUIOn(25)==1)
{
  GUIControl *theControl = GUIControl.GetAtScreenXY(mouse.x, mouse.y);
  if (theControl == meditate)
   {
  SetLabelText (6, 4,  "Meditate");
  SetLabelText (6, 7,  "Cost 0");
	}
	else if (theControl == escape)
 {
  SetLabelText (6, 4,  "Escape");
  SetLabelText (6, 7,  "Cost all");
	}
	else if (theControl == switch)
   {
  SetLabelText (6, 4,  "Switch");
  SetLabelText (6, 7,  "Cost 15");
	}
	else
  {
  SetLabelText (6, 4,  "");
  SetLabelText (6, 7,  "");
  }
}
if (IsGUIOn(26)==1)
{
  GUIControl *theControl = GUIControl.GetAtScreenXY(mouse.x, mouse.y);
  string chitext;
  if (theControl == lowabs)
   {
  SetLabelText (6, 4,  "low absorption");
  SetLabelText (6, 7,  "Cost 0");
	}
	else if (theControl == medabs)
 {
  SetLabelText (6, 4,  "medium absorption");
  StrFormat(chitext, "%d", (GetGlobalInt(7)/2));
  SetLabelText (6, 7,  chitext);
	}
	else if (theControl == highabs)
   {
  SetLabelText (6, 4,  "high absorption");
  StrFormat(chitext, "%d", GetGlobalInt(7));
  SetLabelText (6, 7,  chitext);
	}
	else
  {
  SetLabelText (6, 4,  "");
  SetLabelText (6, 7,  "");
  }
}

}
#sectionend repeatedly_execute  // DO NOT EDIT OR REMOVE THIS LINE


function show_inventory_window () {
  // This demonstrates both types of inventory window - the first part is how to
  // show the built-in inventory window, the second part uses the custom one.
  // Un-comment one section or the other below.
  
  // ** DEFAULT INVENTORY WINDOW
  InventoryScreen();
/*  
  // ** CUSTOM INVENTORY WINDOW
  GUIOn (INVENTORY);  
  // switch to the Use cursor (to select items with)
  SetCursorMode (MODE_USE);
  // But, override the appearance to look like the arrow
  SetMouseCursor (6);
*/
}

#sectionstart on_key_press  // DO NOT EDIT OR REMOVE THIS LINE
function on_key_press(int keycode) {
  // called when a key is pressed. keycode holds the key's ASCII code
  if (IsGamePaused() == 1) keycode=0;  // game paused, so don't react to keypresses
  if (keycode==17)  QuitGame(1);   // Ctrl-Q
  if (keycode==367) RestartGame();  // F9
  if (keycode==434) SaveScreenShot("scrnshot.bmp");  // F12
  //if (keycode==9)   show_inventory_window();  // Tab, show inventory
  //if ((keycode==27) && (character[0].room==7))  character[0].ChangeRoom(4); 

  if (keycode==24)  Debug(3,0);  // Ctrl-X, teleport to room
}
#sectionend on_key_press  // DO NOT EDIT OR REMOVE THIS LINE


#sectionstart on_mouse_click  // DO NOT EDIT OR REMOVE THIS LINE
function on_mouse_click(int button) {
  // called when a mouse button is clicked. button is either LEFT or RIGHT
  if (IsGamePaused() == 1) {
    // Game is paused, so do nothing (ie. don't allow mouse click)
  }
  else if (button==LEFT) {
    //if (mouse.Mode == eModeInteract)
    //{
    //   tempchar=GetCharacterAt(mouse.x, mouse.y);
    //      if (tempchar!=1)
    //      {
     //     SetGlobalInt(53,GetCharacterProperty(tempchar,"strength"));
     //     use_item(GetGlobalInt(60));
     //     }
    //}
    //else
    ProcessClick(mouse.x, mouse.y, GetCursorMode() );
  }
  else {   // right-click, so cycle cursor
    //SetNextCursorMode();
  if (GetGlobalInt(199)>0) 
  {
  if ((character[EGO].room==1) && (IsGUIOn(2)==0)) 
  {
  setgui2();
  GUIOn(2);
  GUIOn(21);
  }
  else GUIOff(2);
}
}
}
#sectionend on_mouse_click  // DO NOT EDIT OR REMOVE THIS LINE


#sectionstart interface_click  // DO NOT EDIT OR REMOVE THIS LINE
function interface_click(int interface, int button) {
  if (interface == ICONBAR) {
    if (button == 4) {  // show inventory
      show_inventory_window();
    }
    else if (button == 5) {   // use selected inventory
      if (character[ GetPlayerCharacter() ].activeinv >= 0)
        SetCursorMode(4);
    } 
    else if (button == 6)    // save game
      SaveGameDialog();
    else if (button == 7)   // load game
      RestoreGameDialog();
    else if (button == 8)   // quit
      QuitGame(1);
    else if (button == 9)    // about
      Display("Adventure Game Studio v2 run-time engine[[Copyright (c) 1999-2003 Chris Jones");
  }  // end if interface ICONBAR

//****************************************************************************
//****************************************************************************
//                             GUI FUNCTIONS
//****************************************************************************
//****************************************************************************


if (interface == TRADEGUI) {
    // They clicked a button on the Inventory GUI

    string tempbuffer;
    string tempbuffer2;
    
		
   
    if (button == 0) {
      if (GetGlobalInt(33)==0)
      {
			if (waterA>0)
			{
			  waterA-=1;
			  weight-=2;
			  overallprice-=trade[GetGlobalInt(2)].water;
			  StrFormat(tempbuffer, "%d", waterA);
			  SetLabelText(31, 2, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			   StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
			 }
	  }
	  else
	  {
	    if (waterA>0)
    {
			  waterA-=1;
			  weight+=2;
			  overallprice-=trade[GetGlobalInt(2)].water;
			  StrFormat(tempbuffer, "%d", waterA);
			  StrFormat(tempbuffer2,"%d",trade[20].water);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 2, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			   StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
		}
   }
			
  }
  if (button == 1) {
    if (GetGlobalInt(33)==0)
      {
    if (weight+2<GetGlobalInt(19)+1)
    {
			  waterA+=1;
			  weight+=2;
			  overallprice+=trade[GetGlobalInt(2)].water;
			  StrFormat(tempbuffer, "%d", waterA);
			  SetLabelText(31, 2, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			   StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
		}
  }
  else
  {
  if (waterA<trade[20].water)
    {
			  waterA+=1;
			  weight-=2;
			  overallprice+=trade[GetGlobalInt(2)].water;
			  StrFormat(tempbuffer, "%d", waterA);
			  StrFormat(tempbuffer2,"%d",trade[20].water);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 2, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			   StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
		}
}
 }
 
   if (button == 18) {  //minus fruit
   if (GetGlobalInt(33)==0)
      {
			if (fruitA>0)
			{
			  fruitA-=1;
			  weight-=2;
			  overallprice-=trade[GetGlobalInt(2)].fruit;
			  StrFormat(tempbuffer, "%d", fruitA);
			  SetLabelText(31, 13, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			   StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
			 }
			}
  else
	  {
	    if (fruitA>0)
    {
			  fruitA-=1;
			  weight+=2;
			  overallprice-=trade[GetGlobalInt(2)].fruit;
			  StrFormat(tempbuffer, "%d", fruitA);
			  StrFormat(tempbuffer2,"%d",trade[20].fruit);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 13, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			   StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
		}
   }

  }
  if (button == 19) {
    if (GetGlobalInt(33)==0)
      {
    if (weight+2<GetGlobalInt(19)+1)
    {
			  fruitA+=1;
			  weight+=2;
			  overallprice+=trade[GetGlobalInt(2)].fruit;
			  StrFormat(tempbuffer, "%d", fruitA);
			  SetLabelText(31, 13, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			  StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
		}
}
else
  {
  if (fruitA<trade[20].fruit)
    {
			  fruitA+=1;
			  weight-=2;
			  overallprice+=trade[GetGlobalInt(2)].fruit;
			  StrFormat(tempbuffer, "%d", fruitA);
			  StrFormat(tempbuffer2,"%d",trade[20].fruit);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 13, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			   StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
		}
}
 }
 
 if (button == 20) {  //minus meat
 if (GetGlobalInt(33)==0)
      {
			if (meatA>0)
			{
			  meatA-=1;
			  weight-=2;
			  overallprice-=trade[GetGlobalInt(2)].meat;
			  StrFormat(tempbuffer, "%d", meatA);
			  SetLabelText(31, 14, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			   StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
			 }
			}
	else
	  {
	    if (meatA>0)
    {
			  meatA-=1;
			  weight+=2;
			  overallprice-=trade[GetGlobalInt(2)].meat;
			  StrFormat(tempbuffer, "%d", meatA);
			  StrFormat(tempbuffer2,"%d",trade[20].meat);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 14, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			   StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
		}
   }

  }
  if (button == 21) {
    if (GetGlobalInt(33)==0)
      {
    if (weight+2<GetGlobalInt(19)+1)
    {
			  meatA+=1;
			  weight+=2;
			  overallprice+=trade[GetGlobalInt(2)].meat;
			  StrFormat(tempbuffer, "%d", meatA);
			  SetLabelText(31, 14, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			  StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
		}
}
else
  {
  if (meatA<trade[20].meat)
    {
			  meatA+=1;
			  weight-=2;
			  overallprice+=trade[GetGlobalInt(2)].meat;
			  StrFormat(tempbuffer, "%d", meatA);
			  StrFormat(tempbuffer2,"%d",trade[20].meat);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 14, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			   StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
		}
}
 }
 
 if (button == 22) {  //minus wood
 if (GetGlobalInt(33)==0)
      {
			if (woodA>0)
			{
			  woodA-=1;
			  weight-=3;
			  overallprice-=trade[GetGlobalInt(2)].wood;
			  StrFormat(tempbuffer, "%d", woodA);
			  SetLabelText(31, 15, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			   StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
			 }
			}
	else
	  {
	    if (woodA>0)
    {
			  woodA-=1;
			  weight+=3;
			  overallprice-=trade[GetGlobalInt(2)].wood;
			  StrFormat(tempbuffer, "%d",woodA);
			  StrFormat(tempbuffer2,"%d",trade[20].wood);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 15, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			   StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
		}
   }

  }
  if (button == 23) {
    if (GetGlobalInt(33)==0)
      {
    if (weight+3<GetGlobalInt(19)+1)
    {
			  woodA+=1;
			  weight+=3;
			  overallprice+=trade[GetGlobalInt(2)].wood;
			  StrFormat(tempbuffer, "%d", woodA);
			  SetLabelText(31, 15, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			  StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
		}
}
else
  {
  if (woodA<trade[20].wood)
    {
			  woodA+=1;
			  weight-=3;
			  overallprice+=trade[GetGlobalInt(2)].wood;
			  StrFormat(tempbuffer, "%d", woodA);
			  StrFormat(tempbuffer2,"%d",trade[20].wood);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 15, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			   StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
		}
}
 }
 
 if (button == 24) {  //minus textile
 if (GetGlobalInt(33)==0)
      {
			if (textA>0)
			{
			  textA-=1;
			  weight-=1;
			  overallprice-=trade[GetGlobalInt(2)].textile;
			  StrFormat(tempbuffer, "%d", textA);
			  SetLabelText(31, 16, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			   StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
			 }
			}
	else
	  {
	    if (textA>0)
    {
			  textA-=1;
			  weight+=1;
			  overallprice-=trade[GetGlobalInt(2)].textile;
			  StrFormat(tempbuffer, "%d", textA);
			  StrFormat(tempbuffer2,"%d",trade[20].textile);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 16, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			   StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
		}
   }

  }
  if (button == 25) {
    if (GetGlobalInt(33)==0)
      {
    if (weight+1<GetGlobalInt(19)+1)
    {
			  textA+=1;
			  weight+=1;
			  overallprice+=trade[GetGlobalInt(2)].textile;
			  StrFormat(tempbuffer, "%d", textA);
			  SetLabelText(31, 16, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			  StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
		}
}
else
  {
  if (textA<trade[20].textile)
    {
			  textA+=1;
			  weight-=1;
			  overallprice+=trade[GetGlobalInt(2)].textile;
			  StrFormat(tempbuffer, "%d", textA);
			  StrFormat(tempbuffer2,"%d",trade[20].textile);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 16, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			   StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
		}
}
 }
 if (button == 26) {  //minus metal
 if (GetGlobalInt(33)==0)
      {
			if (metalA>0)
			{
			  metalA-=1;
			  weight-=4;
			  overallprice-=trade[GetGlobalInt(2)].metal;
			  StrFormat(tempbuffer, "%d", metalA);
			  SetLabelText(31, 17, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			   StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
			 }
			}
	else
	  {
	    if (metalA>0)
    {
			  metalA-=1;
			  weight+=4;
			  overallprice-=trade[GetGlobalInt(2)].metal;
			  StrFormat(tempbuffer, "%d", metalA);
			  StrFormat(tempbuffer2,"%d",trade[20].metal);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 17, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			   StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
		}
   }

  }
  if (button == 27) {
    if (GetGlobalInt(33)==0)
      {
    if (weight+4<GetGlobalInt(19)+1)
    {
			  metalA+=1;
			  weight+=4;
			  overallprice+=trade[GetGlobalInt(2)].metal;
			  StrFormat(tempbuffer, "%d", metalA);
			  SetLabelText(31, 17, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			  StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
		}
}
else
  {
  if (metalA<trade[20].metal)
    {
			  metalA+=1;
			  weight-=4;
			  overallprice+=trade[GetGlobalInt(2)].metal;
			  StrFormat(tempbuffer, "%d", metalA);
			  StrFormat(tempbuffer2,"%d",trade[20].metal);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 17, tempbuffer);
			  StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			   StrFormat(tempbuffer, "%d", overallprice);
			  SetLabelText(31, 29, tempbuffer);
		}
}
 }
 if (button==3) //buy
 {
   if (GetGlobalInt(33)==0)
      {
   if (overallprice<=GetGlobalInt(4))
   {
     SetGlobalInt(4, GetGlobalInt(4)-overallprice);
     
		 trade[20].water+=waterA;
     
     trade[20].meat+=meatA;
     
     trade[20].wood+=woodA;
     
     trade[20].textile+=textA;
     
     trade[20].metal+=metalA;
     
     trade[20].fruit+=fruitA;
 }
 else
   Display("Not enough money");
 SetLabelText(31, 2, "0");
     SetLabelText(31, 13, "0");
     SetLabelText(31, 14, "0");
     SetLabelText(31, 15, "0");
     SetLabelText(31, 16, "0");
     SetLabelText(31, 17, "0");
     weight=(trade[20].water*2)+(trade[20].water*2)+(trade[20].fruit*2)+(trade[20].meat*2)+(trade[20].wood*3)+(trade[20].textile)+(trade[20].metal*4);
 
 }
 else if(GetGlobalInt(33)==1)
 {
   SetGlobalInt(4, GetGlobalInt(4)+overallprice);
		trade[20].water-=waterA;
     trade[20].meat-=meatA;
     trade[20].wood-=woodA;
     trade[20].textile-=textA;
     trade[20].metal-=metalA;
     trade[20].fruit-=fruitA;
     StrFormat(tempbuffer, "%d", 0);
    StrFormat(tempbuffer2,"%d",trade[20].water);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
    SetLabelText(31, 2, tempbuffer);
     StrFormat(tempbuffer, "%d", 0);
    StrFormat(tempbuffer2,"%d",trade[20].fruit);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
    SetLabelText(31, 13, tempbuffer);
     StrFormat(tempbuffer, "%d", 0);
    StrFormat(tempbuffer2,"%d",trade[20].meat);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
    SetLabelText(31, 14, tempbuffer);
     StrFormat(tempbuffer, "%d", 0);
    StrFormat(tempbuffer2,"%d",trade[20].wood);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
    SetLabelText(31, 15, tempbuffer);
     StrFormat(tempbuffer, "%d", 0);
    StrFormat(tempbuffer2,"%d",trade[20].textile);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
    SetLabelText(31, 16, tempbuffer);
     StrFormat(tempbuffer, "%d", 0);
    StrFormat(tempbuffer2,"%d",trade[20].metal);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
    SetLabelText(31, 17, tempbuffer);
     weight=(trade[20].water*2)+(trade[20].water*2)+(trade[20].fruit*2)+(trade[20].meat*2)+(trade[20].wood*3)+(trade[20].textile)+(trade[20].metal*4);
  }
		overallprice=0;
		waterA=0;
		meatA=0;
		woodA=0;
		textA=0;
		metalA=0;
		fruitA=0;
     
     StrFormat(tempbuffer, "%d", GetGlobalInt(4)); //money
		 SetLabelText(31, 5, tempbuffer);
		 
		 		StrFormat(tempbuffer, "%d", weight);
			  StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
			  StrCat(tempbuffer, "/");
			  StrCat(tempbuffer, tempbuffer2);
			  SetLabelText(31, 6, tempbuffer);
			  SetLabelText(31, 29, "0");
		}

if (button==4)
{
  GUIOff(31);
  RunDialog(48);
 }
     
}

if (interface == INVENTORY) {
    // They clicked a button on the Inventory GUI
    
    if (button == 0) {
      // They pressed USE, so switch to the Get cursor
      //character[2].room=character[0].room;
      //SetPlayerCharacter(2);
      GUIOn(12);
      
    }
    
    if (button == 3) {
      // They pressed the exit button, close the GUI
      GUIOff (INVENTORY);
      GUIOff(21);
      GUIOff(29);
      SetCursorMode(0);
      if (character[EGO].room==2)
      {
      GUIOff(6);
      mouse.Mode=eModeWalkto;
      SetGlobalInt(11, 1);
      }
    }

    if ((button==2)  && (GetGlobalInt(53)<GetGlobalInt(54))) //chooses char using arrows
    {
       SetGlobalInt(53, GetGlobalInt(53)+1);
       GUIOff(29);
       SetLabelColor(2,8,65503);
       SetButtonPic(2, 20,1,GetInvGraphic(swords[partner[GetGlobalInt(53)].weaponID].index));
       SetButtonPic(2, 21,1,GetInvGraphic(shields[partner[GetGlobalInt(53)].shieldID].index));
       SetButtonPic(2, 22,1,GetInvGraphic(rings[partner[GetGlobalInt(53)].ringID].index));
       setgui2();
  }
  if ((button==1)  && (GetGlobalInt(53)>0))
    {
       SetGlobalInt(53, GetGlobalInt(53)-1);
       GUIOff(29);
       SetLabelColor(2,8,65503);
       SetButtonPic(2, 20,1,GetInvGraphic(swords[partner[GetGlobalInt(53)].weaponID].index));
       SetButtonPic(2, 21,1,GetInvGraphic(shields[partner[GetGlobalInt(53)].shieldID].index));
       SetButtonPic(2, 22,1,GetInvGraphic(rings[partner[GetGlobalInt(53)].ringID].index));
       setgui2();
    }
  }  //end of inventory
  
if (interface == CHAKRASTATS) {
 
if (button == 3)
	{
		if (IsGUIOn(29)==false && partner[GetGlobalInt(53)].chakratype!=0)
		{
		setgui2();
			GUIOn(29);
		}
		else
			GUIOff(29);
	}
	
if (button==4)
	{
	  int i=partner[0].chakratype;
	  while (i<5)
	  {
	   if (i+40<44)
	   {
			if (GetGlobalInt(i+40)==1)
			{
				partner[0].chakratype=i+1;
				i=5;
				setgui2();
			}
			i++;
		 }
		else
			i=0;
		}//end while
	}//end button4	
		
}

    if (interface== TOWNS)
    {
      //if (button!=null)
      //{
        
				int loc=cEgo.room;
				if (button==0)
				{
					if (loc==3) // larche
					  NewRoom(10);
					if (loc==11) // Drasken
						NewRoom(14);
					if (loc==17) // Nasir
						NewRoom(18);	
				}
				if ((button==1) && (GetGlobalInt(150)==1))
				{
				  if (loc==3) // Larche
						NewRoom(12);
					if (loc==11) // Drasken
						NewRoom(9);
				}
				if ((button==2) && (GetGlobalInt(151)==1))
				{
				  if (loc==3) // larche
						NewRoom(13);
				}
		
				if ((button==3) && (GetGlobalInt(152)==1))
				{
				  if (loc==3) // larche
						NewRoom(16);
				}
        
        if ((button==4) && (GetGlobalInt(153)==1))
				{
				  if (loc==3) // larche
						NewRoom(25);
				}
			//}
  }

    
    if (interface == ATTACKGUI)
    {
      
      if ((button>=0) && (IsGUIOn(12)==false)) {//attack monster
      //mouse.Mode=eModePower;
      mouse.Mode=eModePower;
      gAttackgui.Visible=false;
      }
      
      }
      
if (interface == CHAKRAGUI) //chakra   //gui 12 refers to item GUI
{
  if ((button>=0) && (IsGUIOn(12)==false)) {
		  mouse.Mode=eModeChakra;
      gAttackgui.Visible=false;
  }
} //end of chakragui  
    
if (interface == FOCUSGUI)
{
  if (button==0)
  {
    if (partner[GetGlobalInt(11)].chakratype !=0)
    {
      SetGlobalInt(8, GetGlobalInt(8)+(partner[GetGlobalInt(11)].maxchi/3)+Random(partner[GetGlobalInt(11)].level));
      if (GetGlobalInt(8)>GetGlobalInt(7))
				SetGlobalInt(8, GetGlobalInt(7));
		}
		else
		{
		  SetGlobalInt(8, GetGlobalInt(8)+(partner[GetGlobalInt(11)].maxchi/4)+Random(partner[GetGlobalInt(11)].level/2));
      if (GetGlobalInt(8)>GetGlobalInt(7))
			   SetGlobalInt(8, GetGlobalInt(7));
		}
			GUIOff(6);
       GUIOff(25);
			SetGlobalInt(12, GetGlobalInt(12)+1);
				if (GetGlobalInt(12)>2) 
					SetGlobalInt(12,0);
				SetGlobalInt(11, 1);
   }//end of meditate
   
  if (button==1)
  {
    int chance=GetGlobalInt(8)/2;
		SetGlobalInt(8, 0);
		int randomesc=Random(GetGlobalInt(7));
		if (randomesc<chance)
		{
		  GUIOff(6);
      GUIOff(25);
			SetGlobalInt(13, 2);  //to let battle screen know esc was successful
		  }
		else
		{
		  warning2=CreateTextOverlay(121,15,200,3,65500,"Escape failed");
					Wait(25);
      RemoveOverlay(warning2);
				GUIOff(6);
				GUIOff(25);
			SetGlobalInt(12, GetGlobalInt(12)+1);
				if (GetGlobalInt(12)>2) 
					SetGlobalInt(12,0);
				SetGlobalInt(11, 1);
			}		//end of else >>escape fails
   }	//end of escape
   
   if (button==2)
   {
     int i=partner[0].chakratype;
	  while (i<5)
	  {
	   if (i+40<44)
	   {
			if (GetGlobalInt(i+40)==1)
			{
				partner[0].chakratype=i+1;
				i=5;
				setgui2();
			}
			i++;
		 }
		else
			i=0;
		}//end while
		GUIOff(6);
       GUIOff(25);
			SetGlobalInt(12, GetGlobalInt(12)+1);
				if (GetGlobalInt(12)>2) 
					SetGlobalInt(12,0);
				SetGlobalInt(11, 1);
    }
   
}

if (interface == ABSGUI)
{
      if (button == 0) //absorb
    {
      if (GetGlobalInt(30)==0)
      {
				warning2=CreateTextOverlay(121,15,200,3,65500,"Chalice required");
        Wait(25);
        RemoveOverlay(warning2);
        }
      else
      {
				if (monHP<30)
				{
				  int successRND=Random(5);
				  if (successRND<3)
				  {
				    Display("Success! Monster's soul has been absorbed in chalice");
						SetGlobalInt(31, GetGlobalInt(31)+1);
						if (monTYPE==0) SetGlobalInt(32, GetGlobalInt(32)+1);
						if (monTYPE==1) SetGlobalInt(32, GetGlobalInt(32)+2);
						if (monTYPE==2) SetGlobalInt(32, GetGlobalInt(32)+4);
						if (monTYPE==3) SetGlobalInt(32, GetGlobalInt(32)+8);
						if (monTYPE==4) SetGlobalInt(32, GetGlobalInt(32)+16);
						monHP=0;
          SetGlobalInt(13, 1);
          GUIOff(6);
          GUIOff(26);
          }
        else
        {
          Display("Absorption failed!");
        SetGlobalInt(12, GetGlobalInt(12)+1);
        if (GetGlobalInt(12)>2) SetGlobalInt(12,0);
        GUIOff(6);
        GUIOff(26);
        }
        
				}
			else
			{
          Display("Absorption failed!");
        SetGlobalInt(12, GetGlobalInt(12)+1);
        if (GetGlobalInt(12)>2) SetGlobalInt(12,0);
        GUIOff(6);
        GUIOff(26);
      }
     }
    } 
 if (button==1)
 {
   if (GetGlobalInt(30)==0)
      {
				warning2=CreateTextOverlay(121,15,200,3,65500,"Chalice required");
        Wait(25);
        RemoveOverlay(warning2);
        }
      else
      {
        if (GetGlobalInt(8)>=(GetGlobalInt(7)/2))
        {
          if (monHP<100)
          {
            int successRND=Random(5);
            if (successRND<3 || monHP<30)
            {Display("Success! Monster's soul has been absorbed in chalice");
						SetGlobalInt(31, GetGlobalInt(31)+1);
						if (monTYPE==0) SetGlobalInt(32, GetGlobalInt(32)+1);
						if (monTYPE==1) SetGlobalInt(32, GetGlobalInt(32)+2);
						if (monTYPE==2) SetGlobalInt(32, GetGlobalInt(32)+4);
						if (monTYPE==3) SetGlobalInt(32, GetGlobalInt(32)+8);
						if (monTYPE==4) SetGlobalInt(32, GetGlobalInt(32)+16);
						monHP=0;
          SetGlobalInt(13, 1);
          GUIOff(6);
          GUIOff(26);
          }
        else
        {
          Display("Absorption failed!");
        SetGlobalInt(12, GetGlobalInt(12)+1);
        if (GetGlobalInt(12)>2) SetGlobalInt(12,0);
        GUIOff(6);
        GUIOff(26);
      }
      }
          }
          else
          {
            warning2=CreateTextOverlay(121,15,200,3,65500,"Not enough CHI");
					Wait(25);
        RemoveOverlay(warning2);
            }
    }
 }
 if (button==2)
 {
   if (GetGlobalInt(30)==0)
      {
				warning2=CreateTextOverlay(121,15,200,3,65500,"Chalice required");
        Wait(25);
        RemoveOverlay(warning2);
        }
      else
      {
        if (GetGlobalInt(8)>=GetGlobalInt(7))
        {
          if (monHP<200)
          {
            int successRND=Random(5);
            if (successRND<3 || monHP<70)
            {Display("Success! Monster's soul has been absorbed in chalice");
						SetGlobalInt(31, GetGlobalInt(31)+1);
						if (monTYPE==0) SetGlobalInt(32, GetGlobalInt(32)+1);
						if (monTYPE==1) SetGlobalInt(32, GetGlobalInt(32)+2);
						if (monTYPE==2) SetGlobalInt(32, GetGlobalInt(32)+4);
						if (monTYPE==3) SetGlobalInt(32, GetGlobalInt(32)+8);
						if (monTYPE==4) SetGlobalInt(32, GetGlobalInt(32)+16);
						monHP=0;
          SetGlobalInt(13, 1);
          GUIOff(6);
          GUIOff(26);
          }
        else
        {
          Display("Absorption failed!");
        SetGlobalInt(12, GetGlobalInt(12)+1);
        if (GetGlobalInt(12)>2) SetGlobalInt(12,0);
        GUIOff(6);
        GUIOff(26);
      }
      }
          }
          else
          {
            warning2=CreateTextOverlay(121,15,200,3,65500,"Not enough CHI");
					Wait(25);
        RemoveOverlay(warning2);
            }
      }
    }
}//end of ABS gui

if (interface == DEFENDGUI)
{
	if (button==1)
  {
   if (GetGlobalInt(8)>5)
		{
		  Display("Protecting.");
		  SetGlobalInt(8, GetGlobalInt(8)-5);
		  SetGlobalInt(15, GetGlobalInt(11));
		  SetGlobalInt(12, GetGlobalInt(12)+1);
      if (GetGlobalInt(12)>2) SetGlobalInt(12,0);
      GUIOff(6);
      GUIOff(24);
		}
		else
		{
				warning2=CreateTextOverlay(121,15,200,3,65500,"Not enough CHI");
					Wait(25);
        RemoveOverlay(warning2);
		}
	}
	
} // end of defend GUI
if (interface == BATTLE)
    {
      
      if ((button == 0) && (IsGUIOn(12)==false)) //ATTK
      {
        if(IsGUIOn(22)==false)
        {
					GUIOn(22);
					GUIOff(23);
					GUIOff(24);
					GUIOff(25);
					GUIOff(26);
				}
				else
					GUIOff(22);
   }
   if ((button == 5) && (IsGUIOn(12)==false)) //DEFEND
      {
        if(IsGUIOn(24)==false)
        {
					GUIOn(24);
					GUIOff(23);
					GUIOff(22);
					GUIOff(25);
					GUIOff(26);
				}
				else
					GUIOff(24);
   }
   if ((button == 3) && (IsGUIOn(12)==false)) //CHAKRA
      {
        if(IsGUIOn(23)==false)
        {
					if (partner[GetGlobalInt(11)].chakratype !=0)     
					{
						GUIOn(23);
						GUIOff(22);
						GUIOff(24);
						GUIOff(25);
						GUIOff(26);
					}
				  else
				  {
						warning2=CreateTextOverlay(121,15,200,3,65500,"No chakra affiliation");
        Wait(25);
        RemoveOverlay(warning2);
        }
				}
				else
					GUIOff(23);
			}
   if ((button == 6) && (IsGUIOn(12)==false)) //FOCUS
      {
        if(IsGUIOn(25)==false)
        {
					GUIOn(25);
					GUIOff(23);
					GUIOff(24);
					GUIOff(22);
					GUIOff(26);
				}
				else
					GUIOff(25);
   }
   if ((button == 2) && (IsGUIOn(12)==false)) //ABS
      {
        if(IsGUIOn(26)==false)
        {
					GUIOn(26);
					GUIOff(23);
					GUIOff(24);
					GUIOff(25);
					GUIOff(22);
				}
				else
					GUIOff(26);
   }
        
     if ((button==1)&& (IsGUIOn(12)==false)) //items
        {
          GUIOff(22);
					GUIOff(23);
					GUIOff(24);
					GUIOff(25);
					GUIOff(26);
          SetGlobalInt(53,GetGlobalInt(11));
          character[2].room=character[0].room;
					SetPlayerCharacter(2);
					GUIOn(12);
				}
    

 
 }//end of if BATTLE GUI     

if (interface == NEWPOWER) {
  if (button == 2) {  //destructive
		int i=2;
		int strcounter=2;
		int powercounter=2;
		string powername;
		while (i<5)
		{
		  if (powers[chakra[partner[0].chakratype].power[i]].on==1)
			{
		    if (powers[chakra[partner[0].chakratype].power[i]].type==2)
					strcounter=3; //next healing power
				else if (powers[chakra[partner[0].chakratype].power[i]].type==3)
					strcounter=4;
				else if (powers[chakra[partner[0].chakratype].power[i]].type==4)
					strcounter=-1; //next healing power
			 }
			else 
			{
			  powercounter=i;
			  i=5;
			 }
			  i++;
		 }
	 if (strcounter>0)
	 {
	  if (strcounter==2)
		 chakra[partner[0].chakratype].power[powercounter]=partner[0].chakratype+5;
		if (strcounter==3)
		 chakra[partner[0].chakratype].power[powercounter]=partner[0].chakratype+9;
		if (strcounter==4)
		 chakra[partner[0].chakratype].power[powercounter]=14;
		GetGlobalString(powers[chakra[partner[0].chakratype].power[powercounter]].powername, powername);
		StrCat(powername, " unlocked.");
		Display(powername);
    GUIOff(27);
    if (GetGlobalInt(199)==11)
		{
		  cEgo.Say("Now that I have unlocked a new power, we should go see the monks in Drasken.");
		  SetGlobalInt(199, 12);
		  }
	 }
	 else
		Display("Destructive power maxed out");
	}
  if (button == 3) {  //healing
		int i=2;
		int healcounter=5;
		int powercounter=2;
		string powername;
		while (i<5)
		{
		  if (powers[chakra[partner[0].chakratype].power[i]].on==1)
			{
		    if (powers[chakra[partner[0].chakratype].power[i]].powername==12)
					healcounter=15; //next healing power
				else if (powers[chakra[partner[0].chakratype].power[i]].powername==32)
					healcounter=16;
				else if (powers[chakra[partner[0].chakratype].power[i]].powername==33)
					healcounter=17; //next healing power
				else if (powers[chakra[partner[0].chakratype].power[i]].powername==34)
					healcounter=-1; //next healing power
			 }
			else 
			{
			  powercounter=i;
			  i=5;
			 }
			  i++;
		 }
	 if (healcounter>0)
	 {
		chakra[partner[0].chakratype].power[powercounter]=healcounter;
		GetGlobalString(powers[chakra[partner[0].chakratype].power[powercounter]].powername, powername);
		StrCat(powername, " unlocked.");
		Display(powername);
		GUIOff(27);
		if (GetGlobalInt(199)==11)
		{
		  cEgo.Say("Now that I have unlocked a new power, we should go see the monks in Drasken.");
		  SetGlobalInt(199, 12);
		  }
	 }
	 else
		Display("Healing power maxed out");
	}
} //end of new power

if (interface == UPGRADEPOWER) {
    // They clicked a button on the Inventory GUI
    string buffer;
    if (button == 3) {
        powers[chakra[partner[0].chakratype].power[1]].cost-=(powers[chakra[partner[0].chakratype].power[1]].cost/4);
        GetGlobalString(powers[chakra[partner[0].chakratype].power[1]].powername, buffer);
        StrCat(buffer, "'s CHI cost has decreased.");
        Display(buffer);
        GUIOff(28);
  }
  if (button == 7 && powers[chakra[partner[0].chakratype].power[2]].on==1) {
        powers[chakra[partner[0].chakratype].power[2]].cost-=(powers[chakra[partner[0].chakratype].power[2]].cost/4);
        GetGlobalString(powers[chakra[partner[0].chakratype].power[2]].powername, buffer);
        StrCat(buffer, "'s CHI cost has decreased.");
        Display(buffer);
        GUIOff(28);
  }
  if (button == 8 && powers[chakra[partner[0].chakratype].power[3]].on==1) {
        powers[chakra[partner[0].chakratype].power[3]].cost-=(powers[chakra[partner[0].chakratype].power[3]].cost/4);
        GetGlobalString(powers[chakra[partner[0].chakratype].power[3]].powername, buffer);
        StrCat(buffer, "'s CHI cost has decreased.");
        Display(buffer);
        GUIOff(28);
  }
  if (button == 9 && powers[chakra[partner[0].chakratype].power[4]].on==1) {
        powers[chakra[partner[0].chakratype].power[4]].cost-=(powers[chakra[partner[0].chakratype].power[4]].cost/4);
        GetGlobalString(powers[chakra[partner[0].chakratype].power[4]].powername, buffer);
        StrCat(buffer, "'s CHI cost has decreased.");
        Display(buffer);
        GUIOff(28);
  }
  if (button == 10) {
        powers[chakra[partner[0].chakratype].power[1]].str+=(powers[chakra[partner[0].chakratype].power[1]].str/4);
        GetGlobalString(powers[chakra[partner[0].chakratype].power[1]].powername, buffer);
        StrCat(buffer, "'s strength has increased.");
        Display(buffer);
        GUIOff(28);
}
if (button == 11 && powers[chakra[partner[0].chakratype].power[2]].on==1) {
        powers[chakra[partner[0].chakratype].power[2]].str+=(powers[chakra[partner[0].chakratype].power[2]].str/4);
        GetGlobalString(powers[chakra[partner[0].chakratype].power[2]].powername, buffer);
        StrCat(buffer, "'s strength has increased.");
        Display(buffer);
        GUIOff(28);
}
if (button == 12 && powers[chakra[partner[0].chakratype].power[3]].on==1) {
        powers[chakra[partner[0].chakratype].power[3]].str+=(powers[chakra[partner[0].chakratype].power[3]].str/4);
        GetGlobalString(powers[chakra[partner[0].chakratype].power[3]].powername, buffer);
        StrCat(buffer, "'s strength has increased.");
        Display(buffer);
        GUIOff(28);
}
if (button == 13 && powers[chakra[partner[0].chakratype].power[4]].on==1) {
        powers[chakra[partner[0].chakratype].power[4]].str+=(powers[chakra[partner[0].chakratype].power[4]].str/4);
        GetGlobalString(powers[chakra[partner[0].chakratype].power[4]].powername, buffer);
        StrCat(buffer, "'s strength has increased.");
        Display(buffer);
        GUIOff(28);
  }
}

if (interface == SOULUPGRADE) {
    // They clicked a button on the Inventory GUI
    if (button == 0) 
	{ 
		if (GetGlobalInt(3)==8)
		{
		  int tempstr=partner[GetGlobalInt(53)].level*4+Random(partner[GetGlobalInt(53)].level);
			if (tempstr<2) tempstr=2;
			partner[GetGlobalInt(53)].maxhp+=tempstr;
			LoseInventoryFromCharacter(2,GetGlobalInt(3)); 
			Display("HP increased!");
			setgui2();
			GUIOff(32);
		}
	else
	{
	  int tempstr=partner[GetGlobalInt(53)].level*5+Random(partner[GetGlobalInt(53)].level);
			if (tempstr<4) tempstr=4;
			partner[GetGlobalInt(53)].maxhp+=tempstr;
			LoseInventoryFromCharacter(2,GetGlobalInt(3));
			Display("HP increased!"); 
			setgui2();
			GUIOff(32);
	}
	}
	
	if (button == 4) 
	{ 
		if (GetGlobalInt(3)==8)
		{
		  int tempstr=partner[GetGlobalInt(53)].level*2+Random(partner[GetGlobalInt(53)].level);
			if (tempstr<2) tempstr=2;
			partner[GetGlobalInt(53)].strength+=tempstr;
			LoseInventoryFromCharacter(2,GetGlobalInt(3)); 
			Display("Strength increased!");
			setgui2();
			GUIOff(32);
		}
	else
	{
	  int tempstr=partner[GetGlobalInt(53)].level*4+Random(partner[GetGlobalInt(53)].level);
			if (tempstr<4) tempstr=4;
			partner[GetGlobalInt(53)].strength+=tempstr;
			LoseInventoryFromCharacter(2,GetGlobalInt(3));
			Display("Strength increased!"); 
			setgui2();
			GUIOff(32);
	}
	}
	
		if (button == 1) 
	{ 
		if (GetGlobalInt(3)==8)
		{
		  int tempstr=partner[GetGlobalInt(53)].level*2+Random(partner[GetGlobalInt(53)].level);
			if (tempstr<2) tempstr=2;
			partner[GetGlobalInt(53)].defense+=tempstr;
			LoseInventoryFromCharacter(2,GetGlobalInt(3)); 
			Display("Defense increased!");
			setgui2();
			GUIOff(32);
		}
	else
	{
	  int tempstr=partner[GetGlobalInt(53)].level*4+Random(partner[GetGlobalInt(53)].level);
			if (tempstr<4) tempstr=4;
			partner[GetGlobalInt(53)].defense+=tempstr;
			LoseInventoryFromCharacter(2,GetGlobalInt(3));
			Display("Defense increased!"); 
			setgui2();
			GUIOff(32);
	}
	}

	if (button == 2) 
	{ 
		if (GetGlobalInt(3)==8)
		{
		  int tempstr=partner[GetGlobalInt(53)].level*2+Random(partner[GetGlobalInt(53)].level);
			if (tempstr<2) tempstr=2;
			partner[GetGlobalInt(53)].speed+=tempstr;
			LoseInventoryFromCharacter(2,GetGlobalInt(3)); 
			Display("Speed increased!");
			setgui2();
			GUIOff(32);
		}
	else
	{
	  int tempstr=partner[GetGlobalInt(53)].level*4+Random(partner[GetGlobalInt(53)].level);
			if (tempstr<4) tempstr=4;
			partner[GetGlobalInt(53)].speed+=tempstr;
			LoseInventoryFromCharacter(2,GetGlobalInt(3));
			Display("Speed increased!"); 
			setgui2();
			GUIOff(32);
	}
	}
	if (button == 5) 
	{ 
		if (GetGlobalInt(3)==8)
		{
		  int tempstr=partner[GetGlobalInt(53)].level*2+Random(partner[GetGlobalInt(53)].level);
			if (tempstr<2) tempstr=2;
			partner[GetGlobalInt(53)].chi+=tempstr;
			LoseInventoryFromCharacter(2,GetGlobalInt(3)); 
			Display("CHI increased!");
			setgui2();
			GUIOff(32);
		}
	else
	{
	  int tempstr=partner[GetGlobalInt(53)].level*4+Random(partner[GetGlobalInt(53)].level);
			if (tempstr<4) tempstr=4;
			partner[GetGlobalInt(53)].chi+=tempstr;
			LoseInventoryFromCharacter(2,GetGlobalInt(3));
			Display("CHI increased!"); 
			setgui2();
			GUIOff(32);
	}
	}
	if (button == 3) 
	{ 
		if (GetGlobalInt(3)==8)
		{
		  int randomboost=Random(5);
		  int tempstr=Random(partner[GetGlobalInt(53)].level);
			if (tempstr<1) tempstr=1;
			partner[GetGlobalInt(53)].maxhp+=tempstr*2;
			if (randomboost==1)
			{
				partner[GetGlobalInt(53)].strength+=tempstr*2;
			}
	    else if (randomboost==2)
	    {
	      partner[GetGlobalInt(53)].chi+=tempstr*2;
	    }
	    else if (randomboost==3)
	    {
	      partner[GetGlobalInt(53)].strength+=tempstr;
	      partner[GetGlobalInt(53)].maxhp+=tempstr;
	      partner[GetGlobalInt(53)].defense+=tempstr*2;
	    }
	    else if (randomboost==4)
	    {
	      partner[GetGlobalInt(53)].speed+=tempstr*2;
	      partner[GetGlobalInt(53)].chi+=tempstr;
			  partner[GetGlobalInt(53)].defense+=tempstr;
			}
			else if (randomboost==5)
	    {
	      partner[GetGlobalInt(53)].maxhp+=tempstr*2;
			  partner[GetGlobalInt(53)].defense+=tempstr;
			}
	    if (randomboost<3)
      {
			partner[GetGlobalInt(53)].strength+=2;
			partner[GetGlobalInt(53)].maxhp+=2;
			}
			LoseInventoryFromCharacter(2,GetGlobalInt(3)); 
			Display("Overall stats increased!");
			setgui2();
			GUIOff(32);
		}
	else
	{
		  int randomboost=Random(5);
		  int tempstr=Random(partner[GetGlobalInt(53)].level*2);
			if (tempstr<4) tempstr=4;
			partner[GetGlobalInt(53)].maxhp+=tempstr*3;
			if (randomboost==1)
			{
				partner[GetGlobalInt(53)].strength+=tempstr*2;
			}
	    else if (randomboost==2)
	    {
	      partner[GetGlobalInt(53)].chi+=tempstr*2;
	    }
	    else if (randomboost==3)
	    {
	      partner[GetGlobalInt(53)].strength+=tempstr*2;
	      partner[GetGlobalInt(53)].maxhp+=tempstr*2;
	      partner[GetGlobalInt(53)].defense+=tempstr*2;
	    }
	    else if (randomboost==4)
	    {
	      partner[GetGlobalInt(53)].speed+=tempstr*3;
	      partner[GetGlobalInt(53)].chi+=tempstr*2;
			  partner[GetGlobalInt(53)].defense+=tempstr*2;
			}
			else if (randomboost==5)
	    {
	      partner[GetGlobalInt(53)].maxhp+=tempstr*2;
			  partner[GetGlobalInt(53)].defense+=tempstr*2;
			}
	    if (randomboost<3)
      {
			partner[GetGlobalInt(53)].strength+=10;
			partner[GetGlobalInt(53)].maxhp+=10;
			}
			LoseInventoryFromCharacter(2,GetGlobalInt(3)); 
			Display("Overall stats increased!");
			setgui2();
			GUIOff(32);
		}
	}
		if (button == 6) 
	{ 
		if (GetInvProperty(GetGlobalInt(3), "kind")==partner[GetGlobalInt(53)].chakratype && chakra[partner[0].chakratype].power[4]==0)
		{
			LoseInventoryFromCharacter(2,GetGlobalInt(3)); 
			GUIOff(32);
			GUIOn(27);//new power
		}
	else
	{
		  chakra[partner[0].chakratype].exp+=100;
		  chakralevelup();
			LoseInventoryFromCharacter(2,GetGlobalInt(3));
			GUIOff(32);
	}
	}
}
	
	
if (interface == ITEMSGUI)
{
    if ((button == 1) && (game.top_inv_item < game.num_inv_items - game.num_inv_displayed)) {
      // scroll down
      game.top_inv_item = game.top_inv_item + game.items_per_line;
    }
    if ((button == 2) && (game.top_inv_item > 0)){
      // scroll up
      game.top_inv_item = game.top_inv_item - game.items_per_line;
    }
	if (button == 3)
	{
	  
	  character[2].room=-1;
	  SetPlayerCharacter(0);
	  GUIOff(ITEMSGUI);
	   if (character[EGO].room==2)
      {
      mouse.Mode=eModeWalkto;
      }
	}
}

if (interface == WEAPONSGUI)
{
    if ((button == 1) && (game.top_inv_item < game.num_inv_items - game.num_inv_displayed)) {
      // scroll down
      game.top_inv_item = game.top_inv_item + game.items_per_line;
    }
    if ((button == 2) && (game.top_inv_item > 0)){
      // scroll up
      game.top_inv_item = game.top_inv_item - game.items_per_line;
    }
	if (button == 3)
	{
	  gWeaponsgui.Visible=false;
	}
	if (button==6)
	{
	  if (partner[GetGlobalInt(53)].weaponID!=0)
	  {
	  AddInventoryToCharacter(partner[GetGlobalInt(53)].view,swords[partner[GetGlobalInt(53)].weaponID].index);
	  partner[GetGlobalInt(53)].weaponID=0;
	  setgui2();
	  }
	  }
}

if (interface == SHIELDSGUI)
{
    if ((button == 1) && (game.top_inv_item < game.num_inv_items - game.num_inv_displayed)) {
      // scroll down
      game.top_inv_item = game.top_inv_item + game.items_per_line;
    }
    if ((button == 2) && (game.top_inv_item > 0)){
      // scroll up
      game.top_inv_item = game.top_inv_item - game.items_per_line;
    }
	if (button == 3)
	{
	  
	  character[2].room=-1;
	  SetPlayerCharacter(0);
	  gShieldsgui.Visible=false;
	}
	if (button==6)
	{
	  if (partner[GetGlobalInt(53)].shieldID!=0)
	  {
	  AddInventoryToCharacter(4,shields[partner[GetGlobalInt(53)].shieldID].index);
	  partner[GetGlobalInt(53)].shieldID=0;
	  setgui2();
	  }
	  }
}

if (interface == RINGSGUI)
{
    if ((button == 1) && (game.top_inv_item < game.num_inv_items - game.num_inv_displayed)) {
      // scroll down
      game.top_inv_item = game.top_inv_item + game.items_per_line;
    }
    if ((button == 2) && (game.top_inv_item > 0)){
      // scroll up
      game.top_inv_item = game.top_inv_item - game.items_per_line;
    }
	if (button == 3)
	{
	  
	  character[2].room=-1;
	  SetPlayerCharacter(0);
	  gRingsgui.Visible=false;
	}
	if (button==6)
	{
	  if (partner[GetGlobalInt(53)].ringID!=0)
	  {
	  AddInventoryToCharacter(3,rings[partner[GetGlobalInt(53)].ringID].index);
	  partner[GetGlobalInt(53)].ringID=0;
	  setgui2();
	  }
	  }
}

if (interface == LOADSAVE)
{
	if (button == 0)
		SaveGameDialog();

}
if (interface == MAP)
{
  if (button==0)
  {
    if ((character[0].Room==3)||(character[0].Room==11)||(character[0].Room==17)||(character[0].Room==19))
			NewRoomEx(1, GetGlobalInt(50), GetGlobalInt(51));
		else
		{
    int temproom=character[0].PreviousRoom;
		NewRoomEx(temproom, GetGlobalInt(50), GetGlobalInt(51));
		}
	}
}

if (interface == SHOPGUI2)
{
  if (button == 6)
  {
    if (GetGlobalInt(6)>0)
    {
      int i=0;
      while (i<GetGlobalInt(5))
      {
        if (whichinv==3)
        {
          if (GetInvProperty(GetGlobalInt(6), "handle")==0)
						AddInventoryToCharacter(0,GetGlobalInt(6));
					else
						AddInventoryToCharacter(18,GetGlobalInt(6));
				i++;
				}
				else
				{
				AddInventoryToCharacter(2+whichinv,GetGlobalInt(6));
				i++;
				}
				
      }
      SetGlobalInt(4, GetGlobalInt(4)-(GetGlobalInt(5)*GetInvProperty(GetGlobalInt(6), "value")));
      SetGlobalInt(5, 0);
      SetGlobalInt(6, 0);
   }
  }
  if (button == 7)
  {
    if (GetGlobalInt(6)>0)
    {
      SetGlobalInt(5, 0);
      SetGlobalInt(6, 0);
    }
    else
    {
    GUIOff(SHOPGUI2);
    RunDialog(16);
    }
  }
  if (button == 9)
  {
    itemshop.CharacterToUse=cShopitem;
    SetGlobalInt(5, 0);
    SetGlobalInt(6, 0);
    whichinv=0;
 }
 if (button == 10)
  {
    itemshop.CharacterToUse=cShopweapon;
    SetGlobalInt(5, 0);
    SetGlobalInt(6, 0);
    whichinv=3;
 }
 if (button == 11)
  {
    itemshop.CharacterToUse=cShopshield;
    SetGlobalInt(5, 0);
    SetGlobalInt(6, 0);
    whichinv=2;
 }
 if (button == 12)
  {
    itemshop.CharacterToUse=cShopring;
    SetGlobalInt(5, 0);
    SetGlobalInt(6, 0);
    whichinv=1;
   }
}
}
#sectionend interface_click  // DO NOT EDIT OR REMOVE THIS LINE


#sectionstart inventory1_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory1_a() {
  // script for inventory1: Other click on inventory item

  equip_item(1);

    
}
#sectionend inventory1_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory2_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory2_a() {
  // script for inventory2: Other click on inventory item
if (IsGUIOn(20)==1)
{
  if (GetGlobalInt(6)==2) 
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(2, "value");
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(2, "value"))
  {
    SetGlobalInt(6, 2);
    SetGlobalInt(5,1);
   }
}

else
  equip_item(2);

}
#sectionend inventory2_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory3_b  // DO NOT EDIT OR REMOVE THIS LINE
function inventory3_b() {
  // script for inventory3: Other click on inventory item
//if ((player.room==2) && (mouse.Mode!=eModeInteract))
//{
//	mouse.Mode=eModeInteract;
//	SetGlobalInt(60, 3);
//	Display("Select injured party member");
//}

//else	if (IsGUIOn(20)==1)
if (IsGUIOn(20)==1)
{
  if (GetGlobalInt(6)==3) 
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(3, "value");
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(3, "value"))
  {
    SetGlobalInt(6, 3);
    SetGlobalInt(5,1);
   }
}

else 
	use_item(3);

}
#sectionend inventory3_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart weaponbutton_Click  // DO NOT EDIT OR REMOVE THIS LINE
function weaponbutton_Click(GUIControl *control, MouseButton button) {
  weaponinv.CharacterToUse=character[partner[GetGlobalInt(53)].view];
	gWeaponsgui.Visible=true;
}
#sectionend weaponbutton_Click  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart shieldbutton_Click  // DO NOT EDIT OR REMOVE THIS LINE
function shieldbutton_Click(GUIControl *control, MouseButton button) {
  shieldinv.CharacterToUse=cShields;
	gShieldsgui.Visible=true;}
#sectionend shieldbutton_Click  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory5_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory5_a() {
  // script for Inventory item 5 (power ring): Other click on inventory item
if (IsGUIOn(20)==1)
{
  if (GetGlobalInt(6)==5) 
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(5, "value");
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(5, "value"))
  {
    SetGlobalInt(6, 5);
    SetGlobalInt(5,1);
   }
}

else
equip_item(5);  
}
#sectionend inventory5_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart ringbutton_Click  // DO NOT EDIT OR REMOVE THIS LINE
function ringbutton_Click(GUIControl *control, MouseButton button) {
  ringinv.CharacterToUse=cRings;
 gRingsgui.Visible=true; 
}
#sectionend ringbutton_Click  // DO NOT EDIT OR REMOVE THIS LINE


#sectionstart inventory6_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory6_a() {
  // script for Inventory item 6 (Heavy Axe): Other click on inventory item
if (IsGUIOn(20)==1)
{
  if (GetGlobalInt(6)==6) 
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(6, "value");
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(6, "value"))
  {
    SetGlobalInt(6, 6);
    SetGlobalInt(5,1);
   }
}

else 
	equip_item(6);  
 
}
#sectionend inventory6_a  // DO NOT EDIT OR REMOVE THIS LINE



#sectionstart dialog_request  // DO NOT EDIT OR REMOVE THIS LINE
function dialog_request(int parameter) {
if (parameter==1)
{ 

}
else if (parameter==2)
{
  NewRoomEx(1,GetGlobalInt(50),GetGlobalInt(51));
  SetGlobalInt(199, 4);
  SetGlobalInt(20,  1);
  SetGlobalInt(21,  0);
}
else if (parameter==3)
{
  mission[1].index=1;
  mission[1].daycount=GetGlobalInt(204);
}
else if (parameter==4)
{
  NewRoomEx(character[0].PreviousRoom,GetGlobalInt(50),GetGlobalInt(51));
}
else if (parameter==5)
{
  StopDialog();
  GUIOn(20); 
}
else if (parameter==6) //talked to shopkeeper about crystals.
{
  SetDialogOption(15, 3, eOptionOn);
  SetDialogOption(18, 1, eOptionOn);
}

else if (parameter==7) //talked to guild member about power level.
{
  SetDialogOption(0, 13, eOptionOn);
}

else if (parameter==8) //talked to sensei about soul crystals.
{
  SetGlobalInt(199, 81);
  SetDialogOption(16, 5, eOptionOn);
}

else if (parameter==9) //asked to do an easy mission
{
if (GetGlobalInt(20)==0)
{
  int i=1;
  while (i<10)
  {
    if (mission[i].index==0)
    {
      SetGlobalInt(20, i);
      i=10;
     }
   else
		i++;
	}
	}
	if (GetGlobalInt(20)>0)
		RunDialog(mission[GetGlobalInt(20)].dial);
else
 RunDialog(25);
}

else if (parameter==10) //Asked to do a hard mission
{
if (GetGlobalInt(20)==0)
{
  int i=10;
  while (i<20)
  {
    if (mission[i].index==0)
    {
      SetGlobalInt(20, i);
      i=20;
     }
   else
		i++;
	}
	}
	if (GetGlobalInt(20)>0)
		RunDialog(mission[GetGlobalInt(20)].dial);
else
 RunDialog(25);
 }
else if (parameter==11) //buy items
{
  string tempbuffer;
    string tempbuffer2;
  SetGlobalInt(4,GetGlobalInt(4)-game.score);
  game.score=0;
  StrFormat(tempbuffer, "%d", GetGlobalInt(4));
    SetLabelText(31, 5, tempbuffer);
    
    //**show item prices
    StrFormat(tempbuffer, "%d", trade[GetGlobalInt(2)].water);
    SetLabelText(31, 7, tempbuffer);
    StrFormat(tempbuffer, "%d", trade[GetGlobalInt(2)].fruit);
    SetLabelText(31, 8, tempbuffer);
	  StrFormat(tempbuffer, "%d", trade[GetGlobalInt(2)].meat);
    SetLabelText(31, 9, tempbuffer);
    StrFormat(tempbuffer, "%d", trade[GetGlobalInt(2)].wood);
    SetLabelText(31, 10, tempbuffer);
    StrFormat(tempbuffer, "%d", trade[GetGlobalInt(2)].textile);
    SetLabelText(31, 11, tempbuffer);
    StrFormat(tempbuffer, "%d", trade[GetGlobalInt(2)].metal);
    SetLabelText(31, 12, tempbuffer);
    SetLabelText(31, 2, "0");
    SetLabelText(31, 13, "0");
    SetLabelText(31, 14, "0");
    SetLabelText(31, 15, "0");
    SetLabelText(31, 16, "0");
    SetLabelText(31, 17, "0");
    SetButtonText(31, 3,  "buy");
    SetGlobalInt(33, 0);
    weight=(trade[20].water*2)+(trade[20].water*2)+(trade[20].fruit*2)+(trade[20].meat*2)+(trade[20].wood*3)+(trade[20].textile)+(trade[20].metal*4);
		
		StrFormat(tempbuffer, "%d", weight);
		StrCat(tempbuffer, "/");
		StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
		StrCat(tempbuffer, tempbuffer2);
		SetLabelText(31, 6, tempbuffer); //weight
		
		waterA=0;
		fruitA=0;
		meatA=0;
		woodA=0;
		textA=0;
		metalA=0;
    GUIOn(31);
}
else if (parameter==12) //sell items
{
  string tempbuffer;
    string tempbuffer2;
    
  StrFormat(tempbuffer, "%d", GetGlobalInt(4));
    SetLabelText(31, 5, tempbuffer);
    
    //**show item prices
    StrFormat(tempbuffer, "%d", trade[GetGlobalInt(2)].water);
    SetLabelText(31, 7, tempbuffer);
    StrFormat(tempbuffer, "%d", trade[GetGlobalInt(2)].fruit);
    SetLabelText(31, 8, tempbuffer);
	  StrFormat(tempbuffer, "%d", trade[GetGlobalInt(2)].meat);
    SetLabelText(31, 9, tempbuffer);
    StrFormat(tempbuffer, "%d", trade[GetGlobalInt(2)].wood);
    SetLabelText(31, 10, tempbuffer);
    StrFormat(tempbuffer, "%d", trade[GetGlobalInt(2)].textile);
    SetLabelText(31, 11, tempbuffer);
    StrFormat(tempbuffer, "%d", trade[GetGlobalInt(2)].metal);
    SetLabelText(31, 12, tempbuffer);
    
    StrFormat(tempbuffer, "%d", 0);
    StrFormat(tempbuffer2,"%d",trade[20].water);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
    SetLabelText(31, 2, tempbuffer);
     StrFormat(tempbuffer, "%d", 0);
    StrFormat(tempbuffer2,"%d",trade[20].fruit);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
    SetLabelText(31, 13, tempbuffer);
     StrFormat(tempbuffer, "%d", 0);
    StrFormat(tempbuffer2,"%d",trade[20].meat);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
    SetLabelText(31, 14, tempbuffer);
     StrFormat(tempbuffer, "%d", 0);
    StrFormat(tempbuffer2,"%d",trade[20].wood);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
    SetLabelText(31, 15, tempbuffer);
     StrFormat(tempbuffer, "%d", 0);
    StrFormat(tempbuffer2,"%d",trade[20].textile);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
    SetLabelText(31, 16, tempbuffer);
     StrFormat(tempbuffer, "%d", 0);
    StrFormat(tempbuffer2,"%d",trade[20].metal);
        StrCat(tempbuffer,"/");
				StrCat(tempbuffer, tempbuffer2);
    SetLabelText(31, 17, tempbuffer);
    
    SetButtonText(31, 3,  "sell");
    SetGlobalInt(33, 1);
    weight=(trade[20].water*2)+(trade[20].water*2)+(trade[20].fruit*2)+(trade[20].meat*2)+(trade[20].wood*3)+(trade[20].textile)+(trade[20].metal*4);
		
		StrFormat(tempbuffer, "%d", weight);
		StrCat(tempbuffer, "/");
		StrFormat(tempbuffer2, "%d", GetGlobalInt(19));
		StrCat(tempbuffer, tempbuffer2);
		
		SetLabelText(31, 6, tempbuffer); //weight
		
		waterA=0;
		fruitA=0;
		meatA=0;
		woodA=0;
		textA=0;
		metalA=0;
    GUIOn(31);
  }
  else if (parameter==13)
{
  StopDialog();
  SetMissionGUI();
  GUIOn(10);
}
}
#sectionend dialog_request  // DO NOT EDIT OR REMOVE THIS LINE



#sectionstart character26_a  // DO NOT EDIT OR REMOVE THIS LINE
function character26_a() {
  // script for Character 26 (barchar1): Any click on character
if (GetGlobalInt(199)==3)
	RunDialog(9);  //gives the first mission
else if (GetGlobalInt(20)==1)
{
  int daydiff=mission[1].days+mission[1].daycount-GetGlobalInt(204);
  if (mission[1].index==1)
		{
		  if(daydiff>-1)
		  {
				SetDialogOption(12, 1,eOptionOn); //success
				SetGlobalInt(4, GetGlobalInt(4)+50);
			}
		  else
				SetDialogOption(12, 3, eOptionOn);//failure
			SetDialogOption(12, 2, eOptionOff);
			SetGlobalInt(20, 0); //no current mission
			SetGlobalInt(21, 0);
			SetGlobalInt(199, 6);
		 }
	RunDialog(12);
}
else if (GetGlobalInt(20)>0)
{
if (mission[GetGlobalInt(20)].index<10) //in a mission
  cIs.Say("Come back when you have finished your current mission.");
else if (mission[GetGlobalInt(20)].index==10) //mission success
{
 cEgo.Say("Is, the mission was a success!");
 cIs.Say("Well done. Here's your reward.");
 if(mission[GetGlobalInt(20)].item>0)
 {
   string buffer;
   string buffer2;
   StrCopy(buffer2, "You received a ");
   GetInvName(mission[GetGlobalInt(20)].item,buffer);
	 StrCat(buffer2, buffer);
   Display(buffer2);
   AddInventoryToCharacter(2, mission[GetGlobalInt(20)].item);
 }
 SetGlobalInt(4, GetGlobalInt(4)+mission[GetGlobalInt(20)].money);
 string buffer;
 string buffer2; 
 StrFormat(buffer, "%d", GetGlobalInt(4));
 StrCat(buffer, " gold");
 StrCopy(buffer2, "you received ");
 StrCat(buffer2, buffer);
 Display(buffer2);
 mission[GetGlobalInt(20)].index=-1;//mission closed
 SetGlobalInt(20, 0); // next mission not started yet
}
}
else
	RunDialog(15);


}
#sectionend character26_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart character28_a  // DO NOT EDIT OR REMOVE THIS LINE
function character28_a() {
  // script for Character 28 (barfly2): Any click on character
if (GetGlobalInt(20)==1)
RunDialog(13);  
}
#sectionend character28_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart character27_a  // DO NOT EDIT OR REMOVE THIS LINE
function character27_a() {
  // script for Character 27 (barfly1): Any click on character
RunDialog(14);  
}
#sectionend character27_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory7_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory7_a() {
  // script for Inventory item 7 (elixir): Other click on inventory item
//if (player.room==2)
//{
//	mouse.Mode=eModeInteract;
//	SetGlobalInt(60, 7);
//}

if (IsGUIOn(20)==1)
{
  if (GetGlobalInt(6)==7) 
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(7, "value");
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(7, "value"))
  {
    SetGlobalInt(6, 7);
    SetGlobalInt(5,1);
   }
}

else 
	use_item(7);  
}
#sectionend inventory7_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart character31_a  // DO NOT EDIT OR REMOVE THIS LINE
function character31_a() {
  // script for Character 31 (shrinemonk1): Any click on character
  if (GetGlobalInt(199)==7)
  {
    RunDialog(20);
  }
  else if (GetGlobalInt(199)==8)
  {
    RunDialog(21);
  }
  else if (GetGlobalInt(199)==9)
	{
	  RunDialog(22);
	}
	else if (GetGlobalInt(199)==10)
	{
	  RunDialog(32);
	 }
	else if (GetGlobalInt(199)==12)
	{
	  RunDialog(33);
	 }
	else if (GetGlobalInt(4)>500)
	{
	  if (GetGlobalInt(30)==0)
			RunDialog(38);
		else
			RunDialog(40);
	}
	else RunDialog(39);
}
#sectionend character31_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory13_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory13_a() {
  // script for Inventory item 13 (Small knife): Other click on inventory item
if (IsGUIOn(20)==1)
{
  if (GetGlobalInt(6)==13) 
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(13, "value");
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(13, "value"))
  {
    SetGlobalInt(6, 13);
    SetGlobalInt(5,1);
   }
}

else 
	equip_item(13);  

}
#sectionend inventory13_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory15_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory15_a() {
  // script for Inventory item 15 (Libra sword): Other click on inventory item
if (IsGUIOn(20)==1) //if shop GUI is up
{
  if (GetGlobalInt(6)==15)  //which item to buy
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(15, "value"); //increase how many to buy
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(15, "value"))
  {
    SetGlobalInt(6, 15);
    SetGlobalInt(5,1);
   }
}

else //if not in the shop
	equip_item(15);     
}
#sectionend inventory15_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory14_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory14_a() {
  // script for Inventory item 14 (long sword): Other click on inventory item
if (IsGUIOn(20)==1) //if shop GUI is up
{
  if (GetGlobalInt(6)==14)  //which item to buy
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(14, "value"); //increase how many to buy
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(14, "value"))
  {
    SetGlobalInt(6, 14);
    SetGlobalInt(5,1);
   }
}

else //if not in the shop
	equip_item(14);   
}
#sectionend inventory14_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory16_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory16_a() {
  // script for Inventory item 16 (Iron sword): Other click on inventory item
if (IsGUIOn(20)==1) //if shop GUI is up
{
  if (GetGlobalInt(6)==16)  //which item to buy
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(16, "value"); //increase how many to buy
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(16, "value"))
  {
    SetGlobalInt(6, 16);
    SetGlobalInt(5,1);
   }
}

else //if not in the shop
	equip_item(16);     
}
#sectionend inventory16_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory17_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory17_a() {
  // script for Inventory item 17 (Fancy sword): Other click on inventory item
if (IsGUIOn(20)==1) //if shop GUI is up
{
  if (GetGlobalInt(6)==17)  //which item to buy
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(17, "value"); //increase how many to buy
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(17, "value"))
  {
    SetGlobalInt(6, 17);
    SetGlobalInt(5,1);
   }
}

else //if not in the shop
	equip_item(17);     
}
#sectionend inventory17_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory18_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory18_a() {
  // script for Inventory item 18 (Rusty sword): Other click on inventory item
if (IsGUIOn(20)==1) //if shop GUI is up
{
  if (GetGlobalInt(6)==18)  //which item to buy
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(18, "value"); //increase how many to buy
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(18, "value"))
  {
    SetGlobalInt(6, 18);
    SetGlobalInt(5,1);
   }
}

else //if not in the shop
	equip_item(18);     
}
#sectionend inventory18_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory19_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory19_a() {
  // script for Inventory item 19 (Silver sword): Other click on inventory item
if (IsGUIOn(20)==1) //if shop GUI is up
{
  if (GetGlobalInt(6)==19)  //which item to buy
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(19, "value"); //increase how many to buy
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(19, "value"))
  {
    SetGlobalInt(6, 19);
    SetGlobalInt(5,1);
   }
}

else //if not in the shop
	equip_item(19);     
}
#sectionend inventory19_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory20_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory20_a() {
  // script for Inventory item 20 (Black sword): Other click on inventory item
if (IsGUIOn(20)==1) //if shop GUI is up
{
  if (GetGlobalInt(6)==20)  //which item to buy
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(20, "value"); //increase how many to buy
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(20, "value"))
  {
    SetGlobalInt(6, 20);
    SetGlobalInt(5,1);
   }
}

else //if not in the shop
	equip_item(20);     
}
#sectionend inventory20_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory21_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory21_a() {
  // script for Inventory item 21 (2-handed sword): Other click on inventory item
if (IsGUIOn(20)==1) //if shop GUI is up
{
  if (GetGlobalInt(6)==21)  //which item to buy
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(21, "value"); //increase how many to buy
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(21, "value"))
  {
    SetGlobalInt(6, 21);
    SetGlobalInt(5,1);
   }
}

else //if not in the shop
	equip_item(21);     
}
#sectionend inventory21_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory23_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory23_a() {
  // script for Inventory item 23 (Glass sword): Other click on inventory item
if (IsGUIOn(20)==1) //if shop GUI is up
{
  if (GetGlobalInt(6)==23)  //which item to buy
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(23, "value"); //increase how many to buy
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(23, "value"))
  {
    SetGlobalInt(6, 23);
    SetGlobalInt(5,1);
   }
}

else //if not in the shop
	equip_item(23);     
}
#sectionend inventory23_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory22_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory22_a() {
  // script for Inventory item 22 (Gladiator Sword): Other click on inventory item
if (IsGUIOn(20)==1) //if shop GUI is up
{
  if (GetGlobalInt(6)==22)  //which item to buy
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(22, "value"); //increase how many to buy
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(22, "value"))
  {
    SetGlobalInt(6, 22);
    SetGlobalInt(5,1);
   }
}

else //if not in the shop
	equip_item(22);     
}
#sectionend inventory22_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory24_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory24_a() {
  // script for Inventory item 24 (Fibreglass sword): Other click on inventory item
if (IsGUIOn(20)==1) //if shop GUI is up
{
  if (GetGlobalInt(6)==24)  //which item to buy
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(24, "value"); //increase how many to buy
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(24, "value"))
  {
    SetGlobalInt(6, 24);
    SetGlobalInt(5,1);
   }
}

else //if not in the shop
	equip_item(24);     
}
#sectionend inventory24_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory25_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory25_a() {
  // script for Inventory item 25 (Relic sword): Other click on inventory item
if (IsGUIOn(20)==1) //if shop GUI is up
{
  if (GetGlobalInt(6)==25)  //which item to buy
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(25, "value"); //increase how many to buy
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(25, "value"))
  {
    SetGlobalInt(6, 25);
    SetGlobalInt(5,1);
   }
}

else //if not in the shop
	equip_item(25);     
}
#sectionend inventory25_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory26_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory26_a() {
  // script for Inventory item 26 (hay): Other click on inventory item
if (IsGUIOn(20)==1)
{
  if (GetGlobalInt(6)==26) 
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(26, "value");
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(26, "value"))
  {
    SetGlobalInt(6, 26);
    SetGlobalInt(5,1);
   }
}

else 
	use_item(26);
  
}
#sectionend inventory26_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory8_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory8_a() {
  // script for Inventory item 8 (White Crystal): Other click on inventory item
if (IsGUIOn(20)==1)
{
  if (GetGlobalInt(6)==8) 
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(8, "value");
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(8, "value"))
  {
    SetGlobalInt(6, 8);
    SetGlobalInt(5,1);
   }
}

else 
	use_item(8); 
}
#sectionend inventory8_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory9_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory9_a() {
  // script for Inventory item 9 (earth crystal): Other click on inventory item
use_item(9);  
}
#sectionend inventory9_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory10_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory10_a() {
  // script for Inventory item 10 (water crystal): Other click on inventory item
use_item(10);  
}
#sectionend inventory10_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory11_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory11_a() {
  // script for Inventory item 11 (fire crystal): Other click on inventory item
use_item(11);  
}
#sectionend inventory11_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory12_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory12_a() {
  // script for Inventory item 12 (air crystal): Other click on inventory item
use_item(12);  
}
#sectionend inventory12_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart character25_a  // DO NOT EDIT OR REMOVE THIS LINE
function character25_a() {
  // script for Character 25 (guildchar1): Any click on character
if(GetGlobalInt(199)==15)
{
  if (GetGlobalInt(4)<2000)
    SetDialogOption(35, 2, eOptionOff);
  else
		SetDialogOption(35, 1, eOptionOff);
	RunDialog(35);
}
else
	RunDialog(10);  
}
#sectionend character25_a  // DO NOT EDIT OR REMOVE THIS LINE


#sectionstart inventory27_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory27_a() {
  // script for Inventory item 27 (hi potion): Other click on inventory item
if (IsGUIOn(20)==1)
{
  if (GetGlobalInt(6)==27) 
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(27, "value");
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(27, "value"))
  {
    SetGlobalInt(6, 27);
    SetGlobalInt(5,1);
   }
}

else 
	use_item(27);  
}
#sectionend inventory27_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory28_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory28_a() {
  // script for Inventory item 28 (life ring): Other click on inventory item
if (IsGUIOn(20)==1)
{
  if (GetGlobalInt(6)==28) 
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(28, "value");
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(28, "value"))
  {
    SetGlobalInt(6, 28);
    SetGlobalInt(5,1);
   }
}

else
equip_item(28);  
  
}
#sectionend inventory28_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory29_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory29_a() {
  // script for Inventory item 29 (growth ring): Other click on inventory item
if (IsGUIOn(20)==1)
{
  if (GetGlobalInt(6)==29) 
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(29, "value");
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(29, "value"))
  {
    SetGlobalInt(6, 29);
    SetGlobalInt(5,1);
   }
}

else
equip_item(29);    
}
#sectionend inventory29_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory30_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory30_a() {
  // script for Inventory item 30 (Hercules Ring): Other click on inventory item
if (IsGUIOn(20)==1)
{
  if (GetGlobalInt(6)==30) 
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(30, "value");
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(30, "value"))
  {
    SetGlobalInt(6, 30);
    SetGlobalInt(5,1);
   }
}

else
equip_item(30);    
}
#sectionend inventory30_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory31_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory31_a() {
  // script for Inventory item 31 (Upper Life Ring): Other click on inventory item
if (IsGUIOn(20)==1)
{
  if (GetGlobalInt(6)==31) 
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(31, "value");
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(31, "value"))
  {
    SetGlobalInt(6, 31);
    SetGlobalInt(5,1);
   }
}

else
equip_item(31);    
}
#sectionend inventory31_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory32_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory32_a() {
  // script for Inventory item 32 (Upper Growth Ring): Other click on inventory item
if (IsGUIOn(20)==1)
{
  if (GetGlobalInt(6)==32) 
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(32, "value");
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(32, "value"))
  {
    SetGlobalInt(6, 32);
    SetGlobalInt(5,1);
   }
}

else
equip_item(32);    
}
#sectionend inventory32_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory33_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory33_a() {
  // script for Inventory item 33 (Mana Ring): Other click on inventory item
if (IsGUIOn(20)==1)
{
  if (GetGlobalInt(6)==33) 
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(33, "value");
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(33, "value"))
  {
    SetGlobalInt(6, 33);
    SetGlobalInt(5,1);
   }
}

else
equip_item(33);    
}
#sectionend inventory33_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory34_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory34_a() {
  // script for Inventory item 34 (Dumb Ring): Other click on inventory item
if (IsGUIOn(20)==1)
{
  if (GetGlobalInt(6)==34) 
  {
    int tempamount=(GetGlobalInt(5)+1)*GetInvProperty(34, "value");
		if ((tempamount<=GetGlobalInt(4))&&(GetGlobalInt(4)>0))
		{
			SetGlobalInt(5,GetGlobalInt(5)+1);
		}
  }
  else if (GetGlobalInt(4)>GetInvProperty(34, "value"))
  {
    SetGlobalInt(6, 34);
    SetGlobalInt(5,1);
   }
}

else
equip_item(34);    
}
#sectionend inventory34_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory35_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory35_a() {
  // script for Inventory item 35 (cheat): Other click on inventory item
SetGlobalInt(199,GetGlobalInt(199)+1);  
string buffer;
StrFormat(buffer,"%d",GetGlobalInt(199));
Display(buffer);
}
#sectionend inventory35_a  // DO NOT EDIT OR REMOVE THIS LINE



#sectionstart unhandled_event  // DO NOT EDIT OR REMOVE THIS LINE
function unhandled_event(int what, int type) {
  
}
#sectionend unhandled_event  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart on_event  // DO NOT EDIT OR REMOVE THIS LINE
function on_event(EventType event, int data) {
  
}
#sectionend on_event  // DO NOT EDIT OR REMOVE THIS LINE

function cEgo_Look()
{
DisplayMessage(999);
}

function cEgo_Interact()
{
DisplayMessage(998);
}

function cEgo_Talk()
{
DisplayMessage(997);
}

function cOldbarman_AnyClick()
{
dialog[18].Start();
}


function JobBoardDown_OnClick(GUIControl *control, MouseButton button)
{
    lsMission.SelectedIndex=lsMission.SelectedIndex+1;
    lsType.SelectedIndex=lsType.SelectedIndex+1;
}

function RemoveMission(int MissionIndex)
{
  int loopIndex=MissionIndex;
  
  CurrentMissionIndex=CurrentMissionIndex+1;
  while (loopIndex<10)
  {
  missionListLink[loopIndex]=missionListLink[loopIndex+1];
  loopIndex+=1;
  }
  missionListLink[10]=CurrentMissionIndex;
  
  lsMission.AddItem(mission[CurrentMissionIndex].name);
  lsType.AddItem(MissionType[mission[CurrentMissionIndex].type]);
}


function lsDetails_OnClick(GUIControl *control, MouseButton button)
{
  gMissionmenu.Visible=false;
  dialog[mission[missionListLink[lsMission.SelectedIndex]].dial].Start();
}

export chakra;
export powers;
export rings;
export partner;
export monsters;
export shields;
export swords;
export mission;
export trade;
export cave;
export monsterset;

function MONSTER1_AnyClick()
{
  if (mouse.Mode==eModePower)
  {
    hitmonster(1);
  }
     if (mouse.Mode==eModeChakra)
  {
    ChakraPowerHitMonster(1);
  }
}

function MONSTER2_AnyClick()
{
  if (mouse.Mode==eModePower)
  {
    hitmonster(2);
  }
   if (mouse.Mode==eModeChakra)
  {
    ChakraPowerHitMonster(2);
  }
}

function MONSTER3_AnyClick()
{
  if (mouse.Mode==eModePower)
  {
    hitmonster(3);
  }
     if (mouse.Mode==eModeChakra)
  {
    ChakraPowerHitMonster(3);
  }
}

function MONSTER4_AnyClick()
{
  if (mouse.Mode==eModePower)
  {
    hitmonster(4);
  }
     if (mouse.Mode==eModeChakra)
  {
    ChakraPowerHitMonster(4);
  }
}

function MONSTER5_AnyClick()
{
  if (mouse.Mode==eModePower)
  {
    hitmonster(5);
  }
     if (mouse.Mode==eModeChakra)
  {
    ChakraPowerHitMonster(5);
  }
}