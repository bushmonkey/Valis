// room script file
int current_tile; 
int nogo;
int here;
int counter;
int gated;
int key;
int addon;
int gates[11];
int keys[6];
int tick=0;
string buffer;
string buffer2;

function gatecheck(int positiona, int positionb, int positionc, int direction)
{
  counter=1;
  gated=0;
  nogo=0;
  int next_tile=0;
  int affected_tile=0;
  int gatetype=0;
    if (direction==1) //left
  {
     affected_tile=0; //this tile
     next_tile=1;
     gatetype=1;
  }
  if (direction==2) //up
  {
     affected_tile=0; //this tile
     next_tile=6;
     gatetype=2;
  }
  if (direction==3) //up
  {
     affected_tile=-1; //this tile
     next_tile=-1;
     gatetype=1;
  }
  else if (direction==4) //down
  {
			affected_tile=-6; //tile above
      next_tile=-6;
      gatetype=2;
  }
  while (counter<10)
  {
    if (cave[here].gate[counter]==current_tile+affected_tile && cave[here].gate[counter+1]==gatetype) gated=counter;
    counter+=2;
    }
if (gated>0)
{
  if (cave[here].sgate[1]!=current_tile)
  {
  if (key==0)
  {
    player.Say("The gate is locked, we need a key.");
   nogo=1;
  }
  else
  {
    Display("You opened the gate.");
    key-=1;
    SetGlobalInt(192, key);
    character[ITEMS].LoseInventory(ikey);
    cave[here].gate[gated]=-1;
    object[gated-1].Visible=false;
 }
 }
 else if (cave[here].sgate[2]==1)
  {
  if (character[2].InventoryQuantity[39]<4)
  {
    player.Say("The gate is locked, there are 4 circular indents where a keyhole should be.");
   nogo=1;
  }
  else
  {
    player.Say("The wooden spheres seem to fit in here.");
    Display("You opened the gate.");
    character[2].InventoryQuantity[39]=0;
    cave[here].gate[gated]=-1;
    object[gated-1].Visible=false;
 }
 }
}
if (nogo==0)
{
  if (gatetype==2)
  {
	player.Walk(player.x, positionb, eBlock, eAnywhere);
	player.Walk(player.x, positionc, eBlock, eAnywhere); 
	}
	else
  {
	player.Walk(positiona, player.y, eBlock, eAnywhere);
	player.Walk(positionb, player.y, eBlock, eAnywhere);
	}
current_tile+=next_tile;
//RawDrawImage(0+(75*(current_tile-7)),78, cave[here].tile[current_tile]+195);
drawtile(current_tile);
if ((cave[here].level==0) && (cave[here].entrance==current_tile))
{
object[15].SetPosition(30+(75*(current_tile-1)),9);
object[15].Visible=true;
}
counter=1;
while(counter<10)
{
  if (cave[here].gate[counter]==current_tile)
      object[counter-1].Visible=true;
 else if (cave[here].gate[counter]==current_tile-6 && cave[here].gate[counter+1]==2)
      object[counter-1].Visible=true;
  else if (cave[here].gate[counter]==current_tile-1 && cave[here].gate[counter+1]==1)
      object[counter-1].Visible=true;
  counter+=2;
}
counter=1;
while(counter<6)
{
  if (cave[here].key[counter]==current_tile)
      object[counter+(counter-1)].Visible=true;
  if (cave[here].treasure[counter]==current_tile)
      object[counter+9].Visible=true;
  counter+=1;
}
counter=1;
addon=0;
while(counter<13)
{
    if (cave[here].ladder[counter]==current_tile)
    {
      object[16+addon].Visible=true;
      }
      counter+=3;
      addon+=1;
}
}
nogo=0;
}

#sectionstart room_a  // DO NOT EDIT OR REMOVE THIS LINE
function room_a() {
  // script for Room: Player enters screen (after fadein)
RawSetColor(0);
Display("current depth: %d feet", GetGlobalInt(190)*10);

  
}
#sectionend room_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart room_b  // DO NOT EDIT OR REMOVE THIS LINE
function room_b() {
  // script for Room: Repeatedly execute
if (character[EGO].IsCollidingWithObject(object[15]) == 1)
NewRoomEx(1,GetGlobalInt(193),GetGlobalInt(194)); 
counter=1;
addon=0;
while (counter<13)
{
if (character[EGO].IsCollidingWithObject(object[16+addon]) == 1)
{
SetGlobalInt(190, cave[here].ladder[counter+1]);
SetGlobalInt(191, cave[here].ladder[counter+2]);
NewRoom(21); 
}
counter+=3;
addon+=1;
}

counter=1;
while (counter<6)
{
if (character[EGO].IsCollidingWithObject(object[counter+(counter-1)]) == 1) {
  object[counter+(counter-1)].Visible=false;
	object[counter+(counter-1)].X=-50;
	keys[counter]=0;
	cave[here].key[counter]=0;
	if (cave[here].skey[1]!=current_tile)
	{
		key+=1;
		SetGlobalInt(192,key);
		Display("You found a key.");
		AddInventoryToCharacter(2,38);
	}
	else
	{
		if (cave[here].skey[2]==1) //wooden sphere
		{
			Display("You found a wooden sphere.");
			AddInventoryToCharacter(2,39);
		}
  }
}
if (character[EGO].IsCollidingWithObject(object[counter+9]) == 1) {
  object[counter+9].Visible=false;
  	if (cave[here].streasure[1]!=current_tile)
	{
int i=(Random(10+cave[here].level))+1;
StrFormat(buffer, "%d", i);
StrCopy(buffer2, "you found ");
StrCat(buffer2, buffer);
StrCopy(buffer, " gold");
StrCat(buffer2, buffer);
Display(buffer2);
}
else
{
  if (cave[here].streasure[2]==1) //found the notebook
  {
   if ((GetGlobalInt(20)==4) && mission[4].index==4)
   {
   player.Say("This is some kind of old journal. I can't decypher what it says though.");
   player.Say("I think we should bring this to the librarian.");
   mission[4].index=5;
   cave[here].streasure[1]=0;
   }
 }
 else
 {
   string temp2;
   string temptext;
   int invtochar;
  StrCopy(temp2, "you received ");
      GetInvName(cave[here].streasure[2], temptext); 
      StrCat(temp2,  temptext);
      Display(temp2);
      invtochar=GetInvProperty(cave[here].streasure[2], "invchar");
      if (invtochar==5)
				invtochar=18;
      AddInventoryToCharacter(invtochar,cave[here].streasure[2]);
  }
  //streasure insert here//
}
object[counter+9].X=-50;
}
counter+=1;
}

//set monster randomness
tick+=1;
if (tick>400)
{
  set_date(1);
  tick=0;
  int i=Random(50);
  if ((i<20) && (IsGUIOn(2)==false))
  {
    SetGlobalInt(50,character[EGO].x);
		SetGlobalInt(51,character[EGO].y);
    SetGlobalInt(12, Random(4));
    SetGlobalInt(16,1); // tells battle screen that monster is random
		PlaySound(3);
		ShakeScreen(2);
		PlayMusic(3);
		ResetRoom(2);
		//NewRoom(2);
		SetGlobalInt(191,current_tile);
		SetGlobalInt(192,key);
		SetNextScreenTransition(eTransitionCrossfade);
		NewRoomEx(2,110,125);
		}
 }
}
#sectionend room_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart room_c  // DO NOT EDIT OR REMOVE THIS LINE
function room_c() {
  // script for Room: Player enters screen (before fadein)
int iy; 
int ix;
   cBrother.ChangeRoom(21);
  StopMusic();
	GUIOff(0);
	GUIOff(18);
	GUIOff(19);
SetGlobalInt(193, GetGlobalInt(50));  //X-position on map.
SetGlobalInt(194, GetGlobalInt(51));  //Y-position on map.
if (character[EGO].PreviousRoom==2)
{
  current_tile=GetGlobalInt(191);
  key=GetGlobalInt(192);
}
else
{
current_tile=GetGlobalInt(191); 
key=GetGlobalInt(192);
int tile=current_tile;
counter=0;
while (counter==0)
{
  if (tile>6)
	{
		tile-=6;
    iy+=1;
   }
  else
  {
    counter=1;
   }
}
    ix=tile-1;
    
character[EGO].x=30+(75*(ix));
  
character[EGO].y=22+(75*iy);
}
nogo=0;
counter=0;
gated=0;
here=GetGlobalInt(190);
drawtile(current_tile);
///////////////////////////////////Needs redoing:      drawvisibletile(here);///////////////
////////////////////////////set entrance

if ((cave[here].level==0) && (cave[here].entrance==current_tile))
object[15].SetPosition(30+(75*(current_tile-1)),9);
else
object[15].Visible=false;

///////////////////////////set gates
ix=0;
iy=0;
int tile_counter=0;
int tile=0;
counter=1;
while (counter<10)
{
  tile=cave[here].gate[counter];
  gates[counter]=cave[here].gate[counter];
  gates[counter+1]=cave[here].gate[counter+1];
	while (tile_counter==0)
	{
  if (tile>6)
	{
		tile-=6;
    iy+=1;
   }
  else
  {
    tile_counter=1;
   }
	}
ix=tile-1;
if (cave[here].gate[counter+1]==2)
{
object[counter-1].SetView(62, 0, 0);
object[counter-1].SetPosition(30+(75*(ix)),84+(75*iy));
}
else if (cave[here].gate[counter+1]==1)
{
object[counter-1].SetView(62, 0, 1);
object[counter-1].SetPosition(74+(75*(ix)),42+(75*iy));
}
object[counter-1].Visible=false;
counter+=2;
iy=0;
tile_counter=0;
}
///////////////////////set keys
counter=1;
iy=0;
ix=0;
tile_counter=0;
while (counter<6)
{
  tile=cave[here].key[counter];
  keys[counter]=cave[here].key[counter];
	while (tile_counter==0)
	{
  if (tile>6)
	{
		tile-=6;
    iy+=1;
   }
  else
  {
    tile_counter=1;
   }
	}
ix=tile-1;	
object[counter+(counter-1)].SetPosition(50+(75*(ix)),21+(75*iy));
object[counter+(counter-1)].Visible=false;
counter+=1;
iy=0;
tile_counter=0;
}
//////////////////////set treasures
counter=1;
iy=0;
ix=0;
tile_counter=0;
while (counter<6)
{
  tile=cave[here].treasure[counter];
	while (tile_counter==0)
	{
  if (tile>6)
	{
		tile-=6;
    iy+=1;
   }
  else
  {
    tile_counter=1;
   }
	}
ix=tile-1;	
object[counter+9].SetPosition(50+(75*(ix)),21+(75*iy));
object[counter+9].Visible=false;
counter+=1;
iy=0;
tile_counter=0;
}

///////////////////////set ladders
counter=1;
iy=0;
ix=0;
addon=0;
tile_counter=0;
while (counter<13)
{
  tile=cave[here].ladder[counter];
	while (tile_counter==0)
	{
  if (tile>6)
	{
		tile-=6;
    iy+=1;
   }
  else
  {
    tile_counter=1;
   }
	}
ix=tile-1;	
object[16+addon].SetPosition(50+(75*(ix)),25+(75*iy));
object[16+addon].Visible=false;
counter+=3;
addon+=1;
iy=0;
tile_counter=0;
}

/////////////////////////end setting
counter=1;
while(counter<10)
{
 if (cave[here].gate[counter]>0)
 {
  if ((cave[here].gate[counter]==current_tile) || (cave[here].visible[cave[here].gate[counter]]==1))
      object[counter-1].Visible=true;
  if (cave[here].gate[counter]==current_tile-6 && cave[here].gate[counter+1]==2)
  {
    Display("sanity check");
      object[counter-1].Visible=true;
      }
  if (cave[here].gate[counter]==current_tile-1 && cave[here].gate[counter+1]==1)
      object[counter-1].Visible=true;
  if (cave[here].gate[counter]<13)
  {
    if (cave[here].visible[cave[here].gate[counter]+6]==1 && cave[here].gate[counter+1]==2)
			      object[counter-1].Visible=true;
	}
	if (cave[here].gate[counter]>1)
  {
    if (cave[here].visible[cave[here].gate[counter]+1]==1 && cave[here].gate[counter+1]==1)
			      object[counter-1].Visible=true;
	}
	
 }
  counter+=2;
}
counter=1;
while(counter<6)
{
  if ((cave[here].key[counter]==current_tile) || (cave[here].visible[cave[here].key[counter]]==1))
      object[counter+(counter-1)].Visible=true;
  counter+=1;
}
counter=1;
addon=0;
while(counter<13)
{
    if ((cave[here].ladder[counter]==current_tile) || (cave[here].visible[cave[here].ladder[counter]]==1))
    {
      object[16+addon].Visible=true;
      }
      counter+=3;
      addon+=1;
}
counter=1;
while(counter<6)
{
  if ((cave[here].treasure[counter]==current_tile) || (cave[here].visible[cave[here].treasure[counter]]==1))
      object[counter+9].Visible=true;
  counter+=1;
}
} //end of if character comes from map screen
#sectionend room_c  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart room_d  // DO NOT EDIT OR REMOVE THIS LINE
function room_d() {
  // script for Room: First time player enters screen
  
}
#sectionend room_d  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot1_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot1_a() {
  // script for Hotspot 1 (Hotspot 1): Any click on hotspot



}
#sectionend hotspot1_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot1_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot1_b() {
  // script for Hotspot 1 (Hotspot 1): Interact hotspot

}
#sectionend hotspot1_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart region1_a  // DO NOT EDIT OR REMOVE THIS LINE
function region1_a() {
  // script for Region 1: Player walks onto region
if (current_tile<7) //above
{
if (cave[here].tile[current_tile]==4 || cave[here].tile[current_tile]==7 || cave[here].tile[current_tile]==9 ||
				cave[here].tile[current_tile]==10 || cave[here].tile[current_tile]==13 || cave[here].tile[current_tile]==14 || cave[here].tile[current_tile]==15 ||
							cave[here].tile[current_tile]==16)//there's an exit below
{
  gatecheck(36, 80, 115,2);

}
}
else if (current_tile>6)
{
  if (cave[here].tile[current_tile]==2 || cave[here].tile[current_tile]==5 || cave[here].tile[current_tile]==8 ||
				cave[here].tile[current_tile]==9 || cave[here].tile[current_tile]==10 || cave[here].tile[current_tile]==14 || cave[here].tile[current_tile]==12 ||
							cave[here].tile[current_tile]==13) //there's an exit above
{
  gatecheck(36, 80, 38,4);

}
}
}
#sectionend region1_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart region3_a  // DO NOT EDIT OR REMOVE THIS LINE
function region3_a() {
  // script for Region 3: Player walks onto region
if (player.x<75) //from left
{ 
if (cave[here].tile[current_tile]==3 || cave[here].tile[current_tile]==6 || cave[here].tile[current_tile]==8 ||
				cave[here].tile[current_tile]==10 || cave[here].tile[current_tile]==12 || cave[here].tile[current_tile]==14 || cave[here].tile[current_tile]==15 ||
							cave[here].tile[current_tile]==16) //there an exit on the right
{

  gatecheck(76, 111, 0, 1);

}
}
else
{ 
  if (cave[here].tile[current_tile]==1 || cave[here].tile[current_tile]==5 || cave[here].tile[current_tile]==6 ||
				cave[here].tile[current_tile]==7 || cave[here].tile[current_tile]==8 || cave[here].tile[current_tile]==9 || cave[here].tile[current_tile]==10 ||
							cave[here].tile[current_tile]==16) //there's an exit on the left
{
  gatecheck(76, 35, 0, 3);

}
}
}
#sectionend region3_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart region2_a  // DO NOT EDIT OR REMOVE THIS LINE
function region2_a() {
  // script for Region 2: Player walks onto region
  // script for Region 1: Player walks onto region
if (current_tile<13) //above
{
if (cave[here].tile[current_tile]==4 || cave[here].tile[current_tile]==7 || cave[here].tile[current_tile]==9 ||
				cave[here].tile[current_tile]==10 || cave[here].tile[current_tile]==13 || cave[here].tile[current_tile]==14 || cave[here].tile[current_tile]==15 ||
							cave[here].tile[current_tile]==16)//there's an exit below
{
  gatecheck(36, 154, 191, 2);
  
}
}
else if (current_tile>6)
{
  if (cave[here].tile[current_tile]==2 || cave[here].tile[current_tile]==5 || cave[here].tile[current_tile]==8 ||
				cave[here].tile[current_tile]==9 || cave[here].tile[current_tile]==10 || cave[here].tile[current_tile]==14 || cave[here].tile[current_tile]==12 ||
							cave[here].tile[current_tile]==13) //there's an exit above
{
  gatecheck(36, 154, 116, 4);

}
}
}
#sectionend region2_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart region4_a  // DO NOT EDIT OR REMOVE THIS LINE
function region4_a() {
  // script for Region 4: Player walks onto region
if (player.x<145)
{ 
if (cave[here].tile[current_tile]==3 || cave[here].tile[current_tile]==6 || cave[here].tile[current_tile]==8 ||
				cave[here].tile[current_tile]==10 || cave[here].tile[current_tile]==12 || cave[here].tile[current_tile]==14 || cave[here].tile[current_tile]==15 ||
							cave[here].tile[current_tile]==16) //there an exit on the right
{
  gatecheck(149, 185, 0, 1);
}
}
else
{ 
if (cave[here].tile[current_tile]==1 || cave[here].tile[current_tile]==5 || cave[here].tile[current_tile]==6 ||
				cave[here].tile[current_tile]==7 || cave[here].tile[current_tile]==8 || cave[here].tile[current_tile]==9 || cave[here].tile[current_tile]==10 ||
							cave[here].tile[current_tile]==16) //there's an exit on the left
{
  gatecheck(149, 111, 0, 3);
}
}
}
#sectionend region4_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart region5_a  // DO NOT EDIT OR REMOVE THIS LINE
function region5_a() {
  // script for Region 4: Player walks onto region
if (player.x<219)
{ 
if (cave[here].tile[current_tile]==3 || cave[here].tile[current_tile]==6 || cave[here].tile[current_tile]==8 ||
				cave[here].tile[current_tile]==10 || cave[here].tile[current_tile]==12 || cave[here].tile[current_tile]==14 || cave[here].tile[current_tile]==15 ||
							cave[here].tile[current_tile]==16) //there an exit on the right
{
  gatecheck(222, 257, 0, 1);
}
}
else
{ 
if (cave[here].tile[current_tile]==1 || cave[here].tile[current_tile]==5 || cave[here].tile[current_tile]==6 ||
				cave[here].tile[current_tile]==7 || cave[here].tile[current_tile]==8 || cave[here].tile[current_tile]==9 || cave[here].tile[current_tile]==10 ||
							cave[here].tile[current_tile]==16) //there's an exit on the left
{
  gatecheck(222, 185, 0, 3);
}
}
}
#sectionend region5_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart region6_a  // DO NOT EDIT OR REMOVE THIS LINE
function region6_a() {
  // script for Region 4: Player walks onto region
if (player.x<293)
{ 
if (cave[here].tile[current_tile]==3 || cave[here].tile[current_tile]==6 || cave[here].tile[current_tile]==8 ||
				cave[here].tile[current_tile]==10 || cave[here].tile[current_tile]==12 || cave[here].tile[current_tile]==14 || cave[here].tile[current_tile]==15 ||
							cave[here].tile[current_tile]==16) //there an exit on the right
{
  gatecheck(298, 333, 0, 1);

}
}
else
{ 
if (cave[here].tile[current_tile]==1 || cave[here].tile[current_tile]==5 || cave[here].tile[current_tile]==6 ||
				cave[here].tile[current_tile]==7 || cave[here].tile[current_tile]==8 || cave[here].tile[current_tile]==9 || cave[here].tile[current_tile]==10 ||
							cave[here].tile[current_tile]==16) //there's an exit on the left
{
  gatecheck(298, 257, 0, 3);
}
}
}
#sectionend region6_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart region7_a  // DO NOT EDIT OR REMOVE THIS LINE
function region7_a() {
  // script for Region 4: Player walks onto region
if (player.x<369)
{ 
if (cave[here].tile[current_tile]==3 || cave[here].tile[current_tile]==6 || cave[here].tile[current_tile]==8 ||
				cave[here].tile[current_tile]==10 || cave[here].tile[current_tile]==12 || cave[here].tile[current_tile]==14 || cave[here].tile[current_tile]==15 ||
							cave[here].tile[current_tile]==16) //there an exit on the right
{
  gatecheck(374, 409, 0, 1);
}
}
else
{ 
if (cave[here].tile[current_tile]==1 || cave[here].tile[current_tile]==5 || cave[here].tile[current_tile]==6 ||
				cave[here].tile[current_tile]==7 || cave[here].tile[current_tile]==8 || cave[here].tile[current_tile]==9 || cave[here].tile[current_tile]==10 ||
							cave[here].tile[current_tile]==16) //there's an exit on the left
{
  gatecheck(374, 333, 0, 3);
}
}
}
#sectionend region7_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart object1_a  // DO NOT EDIT OR REMOVE THIS LINE
function object1_a() {
  // script for Object 1 (key1): Any click on object
object[1].Visible=false;
keys[1]=0;
key+=1;  
}
#sectionend object1_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart object1_b  // DO NOT EDIT OR REMOVE THIS LINE
function object1_b() {
  // script for Object 1 (key1): Interact object
object[1].Visible=false;
keys[1]=0;
key+=1;    
}
#sectionend object1_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart object1_c  // DO NOT EDIT OR REMOVE THIS LINE
function object1_c() {
  // script for Object 1 (key1): Look at object
object[1].Visible=false;
keys[1]=0;
key+=1;    
}
#sectionend object1_c  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart region8_a  // DO NOT EDIT OR REMOVE THIS LINE
function region8_a() {
  // script for Region 8: Player walks onto region

}
#sectionend region8_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart object15_a  // DO NOT EDIT OR REMOVE THIS LINE
function object15_a() {
  // script for Object 15: Interact object
   
}
#sectionend object15_a  // DO NOT EDIT OR REMOVE THIS LINE
